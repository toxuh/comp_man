{"version":3,"sources":["components/ActionsPanel/ActionsPanel.jsx","components/AgreeScreen/messages.js","components/AgreeScreen/AgreeScreen.jsx","components/AppLayout/AppLayout.jsx","components/Modal/SimpleModal.jsx","components/Modal/BbsModal.jsx","components/Modal/ComputerModal.jsx","components/DatePanel/DatePanel.jsx","components/Dictionary/messages.js","components/Dictionary/Dictionary.jsx","components/Modal/EntertainmentModal.jsx","components/Modal/HackingModal.jsx","components/IntroduceScreen/messages.js","components/IntroduceScreen/IntroduceScreen.jsx","components/Modal/JobModal.jsx","components/Modal/Modal.jsx","components/NewsPanel/NewsPanel.jsx","components/Panel/Panel.jsx","components/Modal/SoftwareModal.jsx","components/WorkPanel/messages.js","components/WorkPanel/WorkPanel.jsx","components/index.js","containers/AppBootstrap/reducer.js","store/configureStore.env.js","polyfills/polyfills.env.js","polyfills/polyfills.prod.js","containers/AppBootstrap/types.js","containers/uiRootReducer.js","containers/AppBootstrap/constants.js","containers/ActionsPanel/useActionsPanel.js","containers/ActionsPanel/messages.js","containers/ActionsPanel/ActionsPanel.jsx","containers/AppBootstrap/AgreeScreen.jsx","containers/AppBootstrap/actions.js","containers/AppBootstrap/IntroduceScreen.jsx","containers/uiRootSelector.js","containers/AppBootstrap/selectors.js","containers/PlayerPanel/selectors.js","containers/AppBootstrap/useAppBootstrap.js","containers/AppBootstrap/messages.js","containers/AppBootstrap/AppBootstrap.jsx","containers/ComputerPanel/selectors.js","containers/ComputerPanel/messages.js","containers/ComputerPanel/ComputerPanel.jsx","containers/DatePanel/selectors.js","utils/Timer/timerCounter.js","containers/DatePanel/useDatePanel.js","containers/DatePanel/DatePanel.jsx","containers/NewsPanel/selectors.js","containers/NewsPanel/NewsPanel.jsx","containers/PlayerPanel/messages.js","containers/PlayerPanel/PlayerPanel.jsx","containers/SoftPanel/selectors.js","containers/SoftPanel/messages.js","containers/SoftPanel/SoftPanel.jsx","containers/WorkPanel/selectors.js","containers/WorkPanel/WorkPanel.jsx","containers/index.js","containers/constants.js","serviceWorker.js","store/index.js","store/initialState.js","i18n/index.js","i18n/I18nProvider.jsx","App.jsx","index.jsx","store/rootReducer.js","store/configureStore.prod.js"],"names":["ActionsPanel","props","items","ListGroup","className","map","item","Item","key","name","onClick","handleClick","defineMessages","heading","mainText","submit","AgreeScreen","intl","useIntl","onSubmitAgree","headingText","useMemo","formatMessage","messages","submitText","Container","fluid","Row","Col","Button","AppLayout","actionsPanel","computerPanel","datePanel","newsPanel","playerPanel","softPanel","workPanel","style","padding","SimpleModal","children","isShown","defaultProps","BbsModal","onClose","role","ComputerModal","DatePanel","date","time","no","bad","normal","good","excellent","newbie","programmer","hacker","unemployed","locksmith","Dictionary","value","status","mood","computer","memory","hdd","modem","cd","sound","os","antivirus","programming","bbs","other","position","propTypes","PropTypes","string","isRequired","number","EntertainmentModal","HackingModal","typeYourName","IntroduceScreen","onPlayerNameChange","useState","playerName","changeName","Form","Control","type","placeholder","required","onChange","e","target","JobModal","Modal","trigger","header","isHeaderCloseButton","isOpened","toggleModal","handleOpen","useCallback","handleClose","renderTriggerComponent","text","show","onHide","Header","closeButton","Body","NewsPanel","data","Panel","fields","field","SoftwareModal","perDay","WorkPanel","salary","initialState","agreed","player","money","points","software","counting","work","news","state","action","produce","draft","payload","types","module","exports","require","Intl","PluralRules","RelativeTimeFormat","CHANGE_PLAYER_NAME","CHANGE_AGREED","TIME_STOP","TIME_START","UPDATE_DATE","combineReducers","reducer","useActionsPanel","computerModal","toggleComputerModal","softwareModal","toggleSoftwareModal","hackingModal","toggleHackingModal","bbsModal","toggleBbsModal","jobModal","toggleJobModal","entertainmentModal","toggleEntertainmentModal","handleComputerModalOpen","handleComputerModalClose","handleSoftwareModalOpen","handleSoftwareModalClose","handleHackingModalOpen","handleHackingModalClose","handleBbsModalOpen","handleBbsModalClose","handleJobModalOpen","handleJobModalClose","handleEntertainmentModalOpen","handleEntertainmentModalClose","hacking","job","entertainment","dispatch","useDispatch","handleAgreeChange","handlePlayerNameChange","changePlayerName","uiRootSelector","gameSelector","createSelector","uiRoot","agreedSelector","game","playerSelector","playerNameSelector","moneySelector","pointsSelector","statusSelector","moodSelector","useAppBootstrap","useSelector","isAgreed","startTimer","compMan","AppBootstrap","title","compSelector","computerSelector","comp","memorySelector","hddSelector","modemSelector","cdSelector","soundSelector","ComputerPanel","selectors","panelProps","allDateSelector","dateFullSelector","dateSelector","d","Date","getDate","getMonth","getFullYear","timeSelector","getHours","isCountingSelector","counter","currentDate","isCounting","Promise","resolve","setTimeout","setTime","getTime","toString","useDatePanel","dateFull","updateTime","a","useEffect","allNewsSelector","newsDataSelector","PlayerPanel","softwareSelector","osSelector","soft","antivirusSelector","programmingSelector","bbsSelector","otherSelector","SoftPanel","allWorkSelector","positionSelector","salarySelector","Boolean","window","location","hostname","match","store","configureStore","I18nProvider","memo","activeLocale","getUserLocale","ruMessages","locale","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","UI_ROOT_STORE_SLICE_NAME","additionalMiddlewares","composeEnhancers","compose","middlewares","enhancers","applyMiddleware","createStore","rootReducer"],"mappings":"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","file":"static/js/main.2ec300a1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListGroup } from 'react-bootstrap';\n\nimport './ActionsPanel.css';\n\nconst ActionsPanel = (props) => {\n  const { items } = props;\n\n  return (\n    <ListGroup className=\"ActionsPanel\">\n      {items.map((item) => (\n        <ListGroup.Item key={item.name} onClick={item.handleClick}>\n          {item.name}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n};\n\nActionsPanel.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      handleClick: PropTypes.func.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ActionsPanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  heading: 'Play and enjoy',\n  mainText: 'When you complete this game, blah blah blah',\n  submit: 'OK',\n});\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './AgreeScreen.css';\n\nconst AgreeScreen = (props) => {\n  const intl = useIntl();\n  const { onSubmitAgree } = props;\n\n  const headingText = useMemo(() => intl.formatMessage(messages.heading), [\n    intl,\n  ]);\n  const mainText = useMemo(() => intl.formatMessage(messages.mainText), [intl]);\n  const submitText = useMemo(() => intl.formatMessage(messages.submit), [intl]);\n\n  return (\n    <Container className=\"AgreeScreen\" fluid>\n      <Row>\n        <Col>\n          <h1>{headingText}</h1>\n        </Col>\n      </Row>\n      <Row>\n        <p>{mainText}</p>\n      </Row>\n      <Row>\n        <Button onClick={() => onSubmitAgree()}>{submitText}</Button>\n      </Row>\n    </Container>\n  );\n};\n\nAgreeScreen.propTypes = {\n  onSubmitAgree: PropTypes.func.isRequired,\n};\n\nexport default AgreeScreen;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport './AppLayout.css';\n\nconst AppLayout = (props) => {\n  const {\n    actionsPanel,\n    computerPanel,\n    datePanel,\n    newsPanel,\n    playerPanel,\n    softPanel,\n    workPanel,\n  } = props;\n\n  return (\n    <Container className=\"Game\" fluid>\n      <Row>\n        <Col style={{ padding: '5px' }}>\n          {playerPanel}\n          {computerPanel}\n          {softPanel}\n        </Col>\n        <Col style={{ padding: '5px' }}>\n          {datePanel}\n          {workPanel}\n          {actionsPanel}\n          {newsPanel}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nAppLayout.propTypes = {\n  playerPanel: PropTypes.node.isRequired,\n  computerPanel: PropTypes.node.isRequired,\n  softPanel: PropTypes.node.isRequired,\n  datePanel: PropTypes.node.isRequired,\n  workPanel: PropTypes.node.isRequired,\n  actionsPanel: PropTypes.node.isRequired,\n  newsPanel: PropTypes.node.isRequired,\n};\n\nexport default AppLayout;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\n\r\nimport './SimpleModal.css';\r\n\r\nconst SimpleModal = (props) => {\r\n  const { children, isShown } = props;\r\n\r\n  if (!isShown) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Container className=\"SimpleModal\" fluid>\r\n      <Row>\r\n        <Col>{children}</Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nSimpleModal.propTypes = {\r\n  isShown: PropTypes.bool.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nSimpleModal.defaultProps = {\r\n  children: [],\r\n};\r\n\r\nexport default SimpleModal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst BbsModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      BBS will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nBbsModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nBbsModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default BbsModal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst ComputerModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Computer will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nComputerModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nComputerModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default ComputerModal;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './DatePanel.css';\n\nconst DatePanel = (props) => {\n  const { date, time } = props;\n\n  return (\n    <div className=\"DatePanel\">\n      <div className=\"DatePanel__field Date\">{date}</div>\n      <div className=\"DatePanel__field Time\">{`${time}:00`}</div>\n    </div>\n  );\n};\n\nDatePanel.propTypes = {\n  date: PropTypes.string.isRequired,\n  time: PropTypes.number.isRequired,\n};\n\nexport default DatePanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  no: 'No',\n  bad: 'Bad',\n  normal: 'Normal',\n  good: 'Good',\n  excellent: 'Excellent',\n  newbie: 'Newbie',\n  programmer: 'Programmer',\n  hacker: 'Hacker',\n  unemployed: 'Unemployed',\n  locksmith: 'Locksmith',\n});\n","import PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nconst Dictionary = (props) => {\n  const intl = useIntl();\n  const { name, value } = props;\n\n  const values = {\n    status: [\n      intl.formatMessage(messages.newbie),\n      intl.formatMessage(messages.programmer),\n      intl.formatMessage(messages.hacker),\n    ],\n    mood: [\n      intl.formatMessage(messages.bad),\n      intl.formatMessage(messages.normal),\n      intl.formatMessage(messages.good),\n      intl.formatMessage(messages.excellent),\n    ],\n    computer: [intl.formatMessage(messages.no), '386DX-40', '486DX-66'],\n    memory: [intl.formatMessage(messages.no), 4, 16, 32],\n    hdd: [intl.formatMessage(messages.no), 210],\n    modem: [intl.formatMessage(messages.no), 2400],\n    cd: [intl.formatMessage(messages.no), 4],\n    sound: [intl.formatMessage(messages.no), 'Sound Blaster'],\n    os: [\n      intl.formatMessage(messages.no),\n      'Windows 3.11',\n      'Windows 95',\n      'Windows NT 4.0',\n      'OS/2 5.0 Warp',\n    ],\n    antivirus: [intl.formatMessage(messages.no)],\n    programming: [\n      intl.formatMessage(messages.no),\n      'Pascal',\n      'Assembler',\n      'Visual Basic',\n      'Delphi 3.0',\n    ],\n    bbs: [intl.formatMessage(messages.no)],\n    other: [intl.formatMessage(messages.no)],\n    position: [\n      intl.formatMessage(messages.unemployed),\n      intl.formatMessage(messages.locksmith),\n    ],\n  };\n\n  return values[name][value];\n};\n\nDictionary.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Dictionary;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst EntertainmentModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Entertainment will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nEntertainmentModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nEntertainmentModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default EntertainmentModal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst HackingModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Hacking will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nHackingModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nHackingModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default HackingModal;\r\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  typeYourName: 'Type your name here',\n  submit: 'Submit',\n});\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './IntroduceScreen.css';\n\nconst IntroduceScreen = (props) => {\n  const intl = useIntl();\n  const { onPlayerNameChange } = props;\n\n  const [playerName, changeName] = useState(null);\n\n  const submitText = useMemo(() => intl.formatMessage(messages.submit), [intl]);\n\n  return (\n    <Form className=\"IntroduceScreen\">\n      <Row>\n        <Col>\n          <Form.Control\n            type=\"text\"\n            name=\"name\"\n            placeholder={intl.formatMessage(messages.typeYourName)}\n            required\n            onChange={(e) => changeName(e.target.value)}\n          />\n        </Col>\n        <Col>\n          <Button onClick={() => onPlayerNameChange(playerName)}>\n            {submitText}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nIntroduceScreen.propTypes = {\n  onPlayerNameChange: PropTypes.func.isRequired,\n};\n\nexport default IntroduceScreen;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst JobModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Job will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nJobModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nJobModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default JobModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal as RBModal } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst Modal = (props) => {\n  const { children, trigger, header, isHeaderCloseButton } = props;\n  const [isOpened, toggleModal] = useState(false);\n\n  const handleOpen = useCallback(() => {\n    toggleModal(true);\n  }, [toggleModal]);\n\n  const handleClose = useCallback(() => {\n    toggleModal(false);\n  }, [toggleModal]);\n\n  const renderTriggerComponent = useMemo(\n    () => (\n      <Button className={trigger.className} onClick={handleOpen}>\n        {trigger.text}\n      </Button>\n    ),\n    [trigger, handleOpen],\n  );\n\n  return (\n    <>\n      {renderTriggerComponent}\n      <RBModal show={isOpened} onHide={handleClose}>\n        {header && (\n          <RBModal.Header closeButton={isHeaderCloseButton}>\n            {header}\n          </RBModal.Header>\n        )}\n        <RBModal.Body>{children}</RBModal.Body>\n      </RBModal>\n    </>\n  );\n};\n\nModal.propTypes = {\n  trigger: PropTypes.shape({\n    text: PropTypes.string,\n    className: PropTypes.string,\n    icon: PropTypes.string,\n  }).isRequired,\n  children: PropTypes.node.isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  isHeaderCloseButton: PropTypes.bool,\n};\n\nModal.defaultProps = {\n  header: false,\n  isHeaderCloseButton: true,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewsPanel.css';\n\nconst NewsPanel = (props) => {\n  const { data } = props;\n\n  return <div className=\"NewsPanel\">{data}</div>;\n};\n\nNewsPanel.propTypes = {\n  data: PropTypes.string.isRequired,\n};\n\nexport default NewsPanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Panel.css';\n\nconst Panel = (props) => {\n  const { header, fields } = props;\n\n  return (\n    <div className=\"Panel\">\n      {header && <div className=\"Panel__header\">{header}</div>}\n      {fields.map((field) => (\n        <p key={field.name} className=\"Panel__field\">\n          {`${field.name} -`}\n          <span>{field.value}</span>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nPanel.propTypes = {\n  fields: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.node,\n      ]),\n    }),\n  ).isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nPanel.defaultProps = {\n  header: false,\n};\n\nexport default Panel;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst SoftwareModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Software will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nSoftwareModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nSoftwareModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default SoftwareModal;\r\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Your job',\n  perDay: 'per day',\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './WorkPanel.css';\n\nconst WorkPanel = (props) => {\n  const intl = useIntl();\n  const { position, salary } = props;\n\n  return (\n    <div className=\"WorkPanel\">\n      <div className=\"Panel__header\">{intl.formatMessage(messages.header)}</div>\n      <div className=\"WorkPanel__field\">\n        {position} /{salary}$\n        <span className=\"WorkPanel__description\">\n          {intl.formatMessage(messages.perDay)}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nWorkPanel.propTypes = {\n  position: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  salary: PropTypes.number.isRequired,\n};\n\nexport default WorkPanel;\n","import ActionsPanel from './ActionsPanel/ActionsPanel';\nimport AgreeScreen from './AgreeScreen/AgreeScreen';\nimport AppLayout from './AppLayout/AppLayout';\nimport BbsModal from './Modal/BbsModal';\nimport ComputerModal from './Modal/ComputerModal';\nimport DatePanel from './DatePanel/DatePanel';\nimport Dictionary from './Dictionary/Dictionary';\nimport EntertainmentModal from './Modal/EntertainmentModal';\nimport HackingModal from './Modal/HackingModal';\nimport IntroduceScreen from './IntroduceScreen/IntroduceScreen';\nimport JobModal from './Modal/JobModal';\nimport Modal from './Modal/Modal';\nimport NewsPanel from './NewsPanel/NewsPanel';\nimport Panel from './Panel/Panel';\nimport SoftwareModal from './Modal/SoftwareModal';\nimport WorkPanel from './WorkPanel/WorkPanel';\n\nexport {\n  ActionsPanel,\n  AgreeScreen,\n  AppLayout,\n  BbsModal,\n  ComputerModal,\n  DatePanel,\n  Dictionary,\n  EntertainmentModal,\n  HackingModal,\n  IntroduceScreen,\n  JobModal,\n  NewsPanel,\n  Modal,\n  Panel,\n  SoftwareModal,\n  WorkPanel,\n};\n","import produce from 'immer';\n\nimport * as types from './types';\n\nexport const initialState = {\n  agreed: false,\n  player: {\n    name: null,\n    money: 60,\n    points: 0,\n    status: 0,\n    mood: 1,\n  },\n  computer: {\n    computer: 0,\n    memory: 0,\n    hdd: 0,\n    modem: 0,\n    cd: 0,\n    sound: 0,\n  },\n  software: {\n    os: 0,\n    antivirus: 0,\n    programming: 0,\n    bbs: 0,\n    other: 0,\n  },\n  date: {\n    date: 'Thu Jan 01 1998 09:00:00 GMT+0100 (Central European Standard Time)',\n    counting: false,\n  },\n  work: {\n    position: 0,\n    salary: 0,\n  },\n  news: {\n    data: '',\n  },\n};\n\nexport default (state = initialState, action) =>\n  /* eslint-disable-next-line */\n  produce(state, (draft) => {\n    const { type, payload } = action;\n\n    switch (type) {\n      case types.CHANGE_PLAYER_NAME: {\n        draft.player = { ...draft.player, name: payload };\n\n        break;\n      }\n\n      case types.CHANGE_AGREED: {\n        draft.agreed = true;\n\n        break;\n      }\n\n      case types.TIME_START: {\n        draft.date.counting = true;\n\n        break;\n      }\n\n      case types.TIME_STOP: {\n        draft.date.counting = false;\n\n        break;\n      }\n\n      case types.UPDATE_DATE: {\n        const { date } = payload;\n\n        draft.date = {\n          ...draft.date,\n          date,\n        };\n\n        break;\n      }\n\n      default: {\n        return initialState;\n      }\n    }\n  });\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod');\n} else {\n  module.exports = require('./configureStore.dev');\n}\n","if (process.env.NODE_ENV === 'production') {\n  require('./polyfills.prod');\n} else {\n  require('./polyfills.dev');\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\n\nif (!Intl.PluralRules) {\n  require('@formatjs/intl-pluralrules/polyfill');\n  require('@formatjs/intl-pluralrules/dist/locale-data/en');\n  require('@formatjs/intl-pluralrules/dist/locale-data/ru');\n}\n\nif (!Intl.RelativeTimeFormat) {\n  require('@formatjs/intl-relativetimeformat/polyfill');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/en');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/ru');\n}\n","export const CHANGE_PLAYER_NAME = 'CHANGE_PLAYER_NAME';\nexport const CHANGE_AGREED = 'CHANGE_AGREED';\nexport const TIME_STOP = 'TIME_STOP';\nexport const TIME_START = 'TIME_START';\nexport const UPDATE_DATE = 'UPDATE_DATE';\n","import { combineReducers } from 'redux';\n\nimport reducer from './AppBootstrap/reducer';\nimport { STORE_SLICE_NAME as APP_STORE_SLICE_NAME } from './AppBootstrap/constants';\n\nconst uiRootReducer = combineReducers({\n  [APP_STORE_SLICE_NAME]: reducer,\n});\n\nexport default uiRootReducer;\n","export const STORE_SLICE_NAME = 'app';\n","import { useCallback, useState } from 'react';\n\nconst useActionsPanel = () => {\n  const [computerModal, toggleComputerModal] = useState(false);\n  const [softwareModal, toggleSoftwareModal] = useState(false);\n  const [hackingModal, toggleHackingModal] = useState(false);\n  const [bbsModal, toggleBbsModal] = useState(false);\n  const [jobModal, toggleJobModal] = useState(false);\n  const [entertainmentModal, toggleEntertainmentModal] = useState(false);\n\n  const handleComputerModalOpen = useCallback(() => {\n    toggleComputerModal(true);\n  }, []);\n\n  const handleComputerModalClose = useCallback(() => {\n    toggleComputerModal(false);\n  }, []);\n\n  const handleSoftwareModalOpen = useCallback(() => {\n    toggleSoftwareModal(true);\n  }, []);\n\n  const handleSoftwareModalClose = useCallback(() => {\n    toggleSoftwareModal(false);\n  }, []);\n\n  const handleHackingModalOpen = useCallback(() => {\n    toggleHackingModal(true);\n  }, []);\n\n  const handleHackingModalClose = useCallback(() => {\n    toggleHackingModal(false);\n  }, []);\n\n  const handleBbsModalOpen = useCallback(() => {\n    toggleBbsModal(true);\n  }, []);\n\n  const handleBbsModalClose = useCallback(() => {\n    toggleBbsModal(false);\n  }, []);\n\n  const handleJobModalOpen = useCallback(() => {\n    toggleJobModal(true);\n  }, []);\n\n  const handleJobModalClose = useCallback(() => {\n    toggleJobModal(false);\n  }, []);\n\n  const handleEntertainmentModalOpen = useCallback(() => {\n    toggleEntertainmentModal(true);\n  }, []);\n\n  const handleEntertainmentModalClose = useCallback(() => {\n    toggleEntertainmentModal(false);\n  }, []);\n\n  return {\n    computerModal,\n    handleComputerModalOpen,\n    handleComputerModalClose,\n    softwareModal,\n    handleSoftwareModalOpen,\n    handleSoftwareModalClose,\n    hackingModal,\n    handleHackingModalOpen,\n    handleHackingModalClose,\n    bbsModal,\n    handleBbsModalOpen,\n    handleBbsModalClose,\n    jobModal,\n    handleJobModalOpen,\n    handleJobModalClose,\n    entertainmentModal,\n    handleEntertainmentModalOpen,\n    handleEntertainmentModalClose,\n  };\n};\n\nexport default useActionsPanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  computer: 'Computer',\n  software: 'Software',\n  hacking: 'Hacking',\n  bbs: 'BBS`s',\n  job: 'Find job',\n  entertainment: 'Entertainment',\n});\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport useActionsPanel from './useActionsPanel';\n\nimport messages from './messages';\n\nimport {\n  ActionsPanel as ActionsPanelComponent,\n  BbsModal,\n  ComputerModal,\n  EntertainmentModal,\n  HackingModal,\n  JobModal,\n  SoftwareModal,\n} from '~/components';\n\nconst ActionsPanel = () => {\n  const intl = useIntl();\n  const {\n    computerModal,\n    handleComputerModalOpen,\n    handleComputerModalClose,\n    softwareModal,\n    handleSoftwareModalOpen,\n    handleSoftwareModalClose,\n    hackingModal,\n    handleHackingModalOpen,\n    handleHackingModalClose,\n    bbsModal,\n    handleBbsModalOpen,\n    handleBbsModalClose,\n    jobModal,\n    handleJobModalOpen,\n    handleJobModalClose,\n    entertainmentModal,\n    handleEntertainmentModalOpen,\n    handleEntertainmentModalClose,\n  } = useActionsPanel();\n\n  const items = [\n    {\n      name: intl.formatMessage(messages.computer),\n      handleClick: handleComputerModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.software),\n      handleClick: handleSoftwareModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.hacking),\n      handleClick: handleHackingModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.bbs),\n      handleClick: handleBbsModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.job),\n      handleClick: handleJobModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.entertainment),\n      handleClick: handleEntertainmentModalOpen,\n    },\n  ];\n\n  return (\n    <>\n      <ComputerModal\n        isShown={computerModal}\n        onClose={handleComputerModalClose}\n      />\n      <SoftwareModal\n        isShown={softwareModal}\n        onClose={handleSoftwareModalClose}\n      />\n      <HackingModal isShown={hackingModal} onClose={handleHackingModalClose} />\n      <BbsModal isShown={bbsModal} onClose={handleBbsModalClose} />\n      <JobModal isShown={jobModal} onClose={handleJobModalClose} />\n      <EntertainmentModal\n        isShown={entertainmentModal}\n        onClose={handleEntertainmentModalClose}\n      />\n      <ActionsPanelComponent items={items} />\n    </>\n  );\n};\n\nexport default ActionsPanel;\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { agree } from './actions';\n\nimport { AgreeScreen as AgreeScreenComponent } from '~/components';\n\nconst AgreeScreen = () => {\n  const dispatch = useDispatch();\n\n  const handleAgreeChange = useCallback(() => {\n    dispatch(agree());\n  }, [dispatch]);\n\n  return <AgreeScreenComponent onSubmitAgree={handleAgreeChange} />;\n};\n\nexport default AgreeScreen;\n","import * as types from './types';\n\nexport const changePlayerName = (payload) => ({\n  type: types.CHANGE_PLAYER_NAME,\n  payload,\n});\n\nexport const agree = () => ({\n  type: types.CHANGE_AGREED,\n});\n\nexport const timeStop = () => ({\n  type: types.TIME_STOP,\n});\n\nexport const timeStart = () => ({\n  type: types.TIME_START,\n});\n\nexport const updateDate = (payload) => ({\n  type: types.UPDATE_DATE,\n  payload,\n});\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { changePlayerName } from './actions';\n\nimport { IntroduceScreen as IntroduceScreenComponent } from '~/components';\n\nconst IntroduceScreen = () => {\n  const dispatch = useDispatch();\n\n  const handlePlayerNameChange = useCallback(\n    (payload) => {\n      dispatch(changePlayerName(payload));\n    },\n    [dispatch],\n  );\n\n  return (\n    <IntroduceScreenComponent onPlayerNameChange={handlePlayerNameChange} />\n  );\n};\n\nexport default IntroduceScreen;\n","import { STORE_SLICE_NAME } from './constants';\n\nconst uiRootSelector = (state) => state[STORE_SLICE_NAME];\n\nexport default uiRootSelector;\n","import { createSelector } from 'reselect';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const gameSelector = createSelector(uiRootSelector, (uiRoot) => uiRoot);\n\nexport const agreedSelector = createSelector(\n  gameSelector,\n  (game) => game.agreed,\n);\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const playerSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const playerNameSelector = createSelector(\n  playerSelector,\n  (player) => player.name,\n);\n\nexport const moneySelector = createSelector(\n  playerSelector,\n  (player) => player.money,\n);\n\nexport const pointsSelector = createSelector(\n  playerSelector,\n  (player) => player.points,\n);\n\nexport const statusSelector = createSelector(\n  playerSelector,\n  (player) => player.status,\n);\n\nexport const moodSelector = createSelector(\n  playerSelector,\n  (player) => player.mood,\n);\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { timeStart } from './actions';\nimport { agreedSelector } from './selectors';\n\nimport { playerNameSelector } from '../PlayerPanel/selectors';\n\nconst useAppBootstrap = () => {\n  const dispatch = useDispatch();\n\n  const playerName = useSelector(playerNameSelector);\n  const isAgreed = useSelector(agreedSelector);\n\n  const startTimer = useCallback(() => {\n    dispatch(timeStart());\n  }, [dispatch]);\n\n  return {\n    playerName,\n    isAgreed,\n\n    startTimer,\n  };\n};\n\nexport default useAppBootstrap;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  compMan: 'Computer man',\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport Helmet from 'react-helmet';\n\nimport AgreeScreen from './AgreeScreen';\nimport IntroduceScreen from './IntroduceScreen';\n\nimport useAppBootstrap from './useAppBootstrap';\n\nimport messages from './messages';\n\nconst AppBootstrap = (props) => {\n  const intl = useIntl();\n  const { children } = props;\n  const { playerName, isAgreed, startTimer } = useAppBootstrap();\n\n  if (!playerName && !isAgreed) {\n    return <IntroduceScreen />;\n  }\n\n  if (playerName && !isAgreed) {\n    return <AgreeScreen />;\n  }\n\n  startTimer();\n\n  return (\n    <>\n      <Helmet title={`${intl.formatMessage(messages.compMan)} ${playerName}`} />\n      {children}\n    </>\n  );\n};\n\nAppBootstrap.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default AppBootstrap;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const compSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const computerSelector = createSelector(\n  compSelector,\n  (comp) => comp.computer,\n);\n\nexport const memorySelector = createSelector(\n  compSelector,\n  (comp) => comp.memory,\n);\n\nexport const hddSelector = createSelector(compSelector, (comp) => comp.hdd);\n\nexport const modemSelector = createSelector(compSelector, (comp) => comp.modem);\n\nexport const cdSelector = createSelector(compSelector, (comp) => comp.cd);\n\nexport const soundSelector = createSelector(compSelector, (comp) => comp.sound);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Your computer',\n  computer: 'Computer',\n  memory: 'RAM',\n  hdd: 'HDD',\n  modem: 'Modem',\n  cd: 'CD-ROM',\n  sound: 'Sound Blaster',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst ComputerPanel = () => {\n  const intl = useIntl();\n\n  const computer = useSelector(selectors.computerSelector);\n  const memory = useSelector(selectors.memorySelector);\n  const hdd = useSelector(selectors.hddSelector);\n  const modem = useSelector(selectors.modemSelector);\n  const cd = useSelector(selectors.cdSelector);\n  const sound = useSelector(selectors.soundSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      {\n        name: intl.formatMessage(messages.computer),\n        value: <Dictionary name=\"computer\" value={computer} />,\n      },\n      {\n        name: intl.formatMessage(messages.memory),\n        value: <Dictionary name=\"memory\" value={memory} />,\n      },\n      {\n        name: intl.formatMessage(messages.hdd),\n        value: <Dictionary name=\"hdd\" value={hdd} />,\n      },\n      {\n        name: intl.formatMessage(messages.modem),\n        value: <Dictionary name=\"modem\" value={modem} />,\n      },\n      {\n        name: intl.formatMessage(messages.cd),\n        value: <Dictionary name=\"cd\" value={cd} />,\n      },\n      {\n        name: intl.formatMessage(messages.sound),\n        value: <Dictionary name=\"sound\" value={sound} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default ComputerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allDateSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const dateFullSelector = createSelector(\n  allDateSelector,\n  (date) => date.date,\n);\n\nexport const dateSelector = createSelector(dateFullSelector, (date) => {\n  const d = new Date(date);\n\n  return `${d.getDate()}.${d.getMonth() + 1}.${d.getFullYear()}`;\n});\n\nexport const timeSelector = createSelector(dateFullSelector, (date) => {\n  const d = new Date(date);\n\n  return d.getHours();\n});\n\nexport const isCountingSelector = createSelector(\n  allDateSelector,\n  (date) => date.counting,\n);\n","const HOUR_DURATION = 1000; // In milliseconds\n\nconst counter = (currentDate, isCounting) => {\n  return new Promise((resolve) => {\n    const date = new Date(currentDate);\n\n    setTimeout(() => {\n      if (isCounting) {\n        date.setTime(date.getTime() + 60 * 60 * 1000);\n      }\n\n      resolve({\n        date: date.toString(),\n      });\n    }, HOUR_DURATION);\n  });\n};\n\nexport default counter;\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  dateFullSelector,\n  dateSelector,\n  isCountingSelector,\n  timeSelector,\n} from './selectors';\n\nimport { updateDate } from '../AppBootstrap/actions';\n\nimport counter from '~/utils/Timer/timerCounter';\n\nconst useDatePanel = () => {\n  const dispatch = useDispatch();\n\n  const isCounting = useSelector(isCountingSelector);\n  const dateFull = useSelector(dateFullSelector);\n  const date = useSelector(dateSelector);\n  const time = useSelector(timeSelector);\n\n  const updateTime = useCallback(async () => {\n    const currentDate = await counter(dateFull, isCounting);\n\n    dispatch(updateDate(currentDate));\n  }, [dateFull, dispatch, isCounting]);\n\n  return {\n    date,\n    time,\n\n    updateTime,\n  };\n};\n\nexport default useDatePanel;\n","import React, { useEffect } from 'react';\n\nimport useDatePanel from '~/containers/DatePanel/useDatePanel';\n\nimport { DatePanel as DatePanelComponent } from '~/components';\n\nconst DatePanel = () => {\n  const { date, time, updateTime } = useDatePanel();\n\n  useEffect(() => {\n    updateTime();\n  }, [date, time, updateTime]);\n\n  return <DatePanelComponent date={date} time={time} />;\n};\n\nexport default DatePanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allNewsSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const newsDataSelector = createSelector(\n  allNewsSelector,\n  (news) => news.data,\n);\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { newsDataSelector } from './selectors';\r\n\r\nimport { NewsPanel as NewsPanelComponent } from '~/components';\r\n\r\nconst NewsPanel = () => {\r\n  const data = useSelector(newsDataSelector);\r\n\r\n  return <NewsPanelComponent data={data} />;\r\n};\r\n\r\nexport default NewsPanel;\r\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  money: 'Money',\n  points: 'Points',\n  status: 'Your status',\n  mood: 'Mood',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst PlayerPanel = () => {\n  const intl = useIntl();\n\n  const money = useSelector(selectors.moneySelector);\n  const points = useSelector(selectors.pointsSelector);\n  const status = useSelector(selectors.statusSelector);\n  const mood = useSelector(selectors.moodSelector);\n\n  const panelProps = {\n    header: false,\n    fields: [\n      { name: intl.formatMessage(messages.money), value: `${money}$` },\n      { name: intl.formatMessage(messages.points), value: points },\n      {\n        name: intl.formatMessage(messages.status),\n        value: <Dictionary name=\"status\" value={status} />,\n      },\n      {\n        name: intl.formatMessage(messages.mood),\n        value: <Dictionary name=\"mood\" value={mood} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default PlayerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const softwareSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const osSelector = createSelector(softwareSelector, (soft) => soft.os);\n\nexport const antivirusSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.antivirus,\n);\n\nexport const programmingSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.programming,\n);\n\nexport const bbsSelector = createSelector(softwareSelector, (soft) => soft.bbs);\n\nexport const otherSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.other,\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Installed software',\n  os: 'OS',\n  antivirus: 'Antivirus',\n  programming: 'Programming',\n  bbs: 'BBS',\n  other: 'Other software',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst SoftPanel = () => {\n  const intl = useIntl();\n\n  const os = useSelector(selectors.osSelector);\n  const antivirus = useSelector(selectors.antivirusSelector);\n  const programming = useSelector(selectors.programmingSelector);\n  const bbs = useSelector(selectors.bbsSelector);\n  const other = useSelector(selectors.otherSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      {\n        name: intl.formatMessage(messages.os),\n        value: <Dictionary name=\"os\" value={os} />,\n      },\n      {\n        name: intl.formatMessage(messages.antivirus),\n        value: antivirus || <Dictionary name=\"antivirus\" value={antivirus} />,\n      },\n      {\n        name: intl.formatMessage(messages.programming),\n        value: <Dictionary name=\"programming\" value={programming} />,\n      },\n      {\n        name: intl.formatMessage(messages.bbs),\n        value: <Dictionary name=\"antivirus\" value={bbs} />,\n      },\n      {\n        name: intl.formatMessage(messages.other),\n        value: <Dictionary name=\"antivirus\" value={other} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default SoftPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allWorkSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const positionSelector = createSelector(\n  allWorkSelector,\n  (work) => work.position,\n);\n\nexport const salarySelector = createSelector(\n  allWorkSelector,\n  (work) => work.salary,\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { positionSelector, salarySelector } from './selectors';\n\nimport { Dictionary, WorkPanel as WorkPanelComponent } from '~/components';\n\nconst WorkPanel = () => {\n  const position = useSelector(positionSelector);\n  const salary = useSelector(salarySelector);\n\n  return (\n    <WorkPanelComponent\n      position={<Dictionary name=\"position\" value={position} />}\n      salary={salary}\n    />\n  );\n};\n\nexport default WorkPanel;\n","import reducer from './uiRootReducer';\nimport { STORE_SLICE_NAME as UI_ROOT_STORE_SLICE_NAME } from './constants';\n\nimport ActionsPanel from './ActionsPanel/ActionsPanel';\nimport AppBootstrap from './AppBootstrap/AppBootstrap';\nimport ComputerPanel from './ComputerPanel/ComputerPanel';\nimport DatePanel from './DatePanel/DatePanel';\nimport NewsPanel from './NewsPanel/NewsPanel';\nimport PlayerPanel from './PlayerPanel/PlayerPanel';\nimport SoftPanel from './SoftPanel/SoftPanel';\nimport WorkPanel from './WorkPanel/WorkPanel';\n\nexport {\n  reducer,\n  UI_ROOT_STORE_SLICE_NAME,\n  ActionsPanel,\n  AppBootstrap,\n  ComputerPanel,\n  DatePanel,\n  NewsPanel,\n  PlayerPanel,\n  SoftPanel,\n  WorkPanel,\n};\n","export const STORE_SLICE_NAME = 'game';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import configureStore from './configureStore.env';\nimport initialState from './initialState';\n\n/** @type {import('redux').Store} */\nconst store = configureStore(initialState);\n\nexport default store;\n","export default {};\n","import I18nProvider from './I18nProvider';\n\nexport default I18nProvider;\n","import React, { memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\n\nimport getUserLocale from 'get-user-locale';\n\nimport ruMessages from './translations/ru.json';\n\nconst I18nProvider = ({ children }) => {\n  const activeLocale = getUserLocale();\n\n  const messages = useMemo(\n    // TODO: return user locale using\n    // () => (activeLocale.includes('ru') ? ruMessages : enMessages),\n    () => ruMessages,\n    [],\n  );\n\n  return (\n    <IntlProvider locale={activeLocale} messages={messages}>\n      {children}\n    </IntlProvider>\n  );\n};\n\nI18nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default memo(I18nProvider);\n","import React from 'react';\n\nimport {\n  ActionsPanel,\n  AppBootstrap,\n  ComputerPanel,\n  DatePanel,\n  NewsPanel,\n  PlayerPanel,\n  SoftPanel,\n  WorkPanel,\n} from '~/containers';\nimport { AppLayout } from '~/components';\n\nimport './App.css';\n\nconst App = () => {\n  const playerPanel = <PlayerPanel />;\n  const computerPanel = <ComputerPanel />;\n  const softPanel = <SoftPanel />;\n  const datePanel = <DatePanel />;\n  const workPanel = <WorkPanel />;\n  const actionsPanel = <ActionsPanel />;\n  const newsPanel = <NewsPanel />;\n\n  return (\n    <div className=\"App\">\n      <AppBootstrap>\n        <AppLayout\n          actionsPanel={actionsPanel}\n          datePanel={datePanel}\n          playerPanel={playerPanel}\n          computerPanel={computerPanel}\n          softPanel={softPanel}\n          workPanel={workPanel}\n          newsPanel={newsPanel}\n        />\n      </AppBootstrap>\n    </div>\n  );\n};\n\nexport default App;\n","import './polyfills';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport store from '~/store';\nimport I18nProvider from '~/i18n';\nimport App from '~/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <I18nProvider>\n      <App />\n    </I18nProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux';\n\nimport { UI_ROOT_STORE_SLICE_NAME } from '~/containers';\nimport reducer from '~/containers/AppBootstrap/reducer';\n\nexport default combineReducers({\n  [UI_ROOT_STORE_SLICE_NAME]: reducer,\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\n\nimport rootReducer from './rootReducer';\n\nconst configureStore = (\n  initialState,\n  additionalMiddlewares = [],\n  composeEnhancers = compose,\n) => {\n  const middlewares = [...additionalMiddlewares];\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  return store;\n};\n\nexport default configureStore;\n"],"sourceRoot":""}