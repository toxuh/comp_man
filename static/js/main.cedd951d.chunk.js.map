{"version":3,"sources":["components/WelcomeScreen/intro.png","constants/index.ts","i18n/I18nProvider.tsx","components/Actions/messages.ts","components/Actions/Actions.tsx","components/AgreeScreen/messages.ts","components/AgreeScreen/AgreeScreen.tsx","components/Date/Date.tsx","components/Layout/Layout.tsx","components/Panel/messages.ts","components/Panel/Panel.tsx","components/WelcomeScreen/messages.ts","components/WelcomeScreen/WelcomeScreen.tsx","components/Work/messages.ts","components/Work/Work.tsx","containers/Actions/Actions.tsx","constants/initialState.ts","containers/Date/Date.tsx","containers/Hardware/Hardware.tsx","containers/News/News.tsx","containers/Player/Player.tsx","containers/Software/Software.tsx","containers/Work/Work.tsx","containers/Main/Main.tsx","containers/App/messages.ts","containers/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Mood","Status","Actions","Computer","Memory","Disk","Modem","CD","Sound","OS","Antivirus","Programming","Bbs","Other","Work","memo","children","messages","useMemo","ruMessages","locale","defineMessages","computer","id","defaultMessage","software","hacking","bbs","job","entertainment","items","intl","useIntl","ListGroup","className","map","item","Item","key","formatMessage","message","heading","AgreeScreen","handleSetAgree","Container","fluid","Row","Col","Button","onClick","Date","date","time","Layout","no","money","points","status","mood","newbie","programmer","hacker","bad","normal","good","excellent","hardwareHeading","memory","disk","modem","cd","sound","c386","c486","mb4","mb8","mb16","mb210","mb2400","x4","soundBlaster","softwareHeading","system","antivirus","programming","otherSoftware","windows3","windows95","windowsNt","os2","avNormal","avHacker","pascal","assembler","vb","delphi","ownBbs","otherSoft","Panel","header","fields","name","value","noTranslate","enterYourName","WelcomeScreen","handleSetPlayerName","inputRef","useRef","useState","undefined","setName","Form","src","welcomeImage","alt","Label","Control","type","ref","required","onChange","target","perDay","unemployed","janitor","plumber","position","salary","Object","keys","ActionsEnum","filter","a","userState","hardwareState","softwareState","os","other","workState","DateContainer","setDate","d","fullDate","getDate","getMonth","getFullYear","getHours","toString","useEffect","interval","setInterval","setTime","getTime","clearInterval","Hardware","hardware","News","Player","user","Software","work","WorkEnums","Main","gameTitle","App","isAgreed","setAgreed","playerName","setPlayerName","Helmet","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.cedd951d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/intro.d6f250a8.png\";","export const GAME_NAME = 'Компьютерщик';\n\nexport const DEFAULT_USER_NAME = undefined;\nexport const HOUR_DURATION = 1000;\nexport const DEFAULT_DATE =\n  'Thu Jan 01 1998 09:00:00 GMT+0100 (Central European Standard Time)';\n\nexport const DEFAULT_USER_MONEY = 60;\nexport const DEFAULT_USER_POINTS = 0;\nexport const DEFAULT_USER_STATUS = 0;\nexport const DEFAULT_USER_MOOD = 1;\n\nexport const DEFAULT_HARDWARE_COMPUTER = 0;\nexport const DEFAULT_HARDWARE_MEMORY = 0;\nexport const DEFAULT_HARDWARE_DISK = 0;\nexport const DEFAULT_HARDWARE_MODEM = 0;\nexport const DEFAULT_HARDWARE_CD = 0;\nexport const DEFAULT_HARDWARE_SOUND = 0;\n\nexport const DEFAULT_SOFTWARE_OS = 0;\nexport const DEFAULT_SOFTWARE_ANTIVIRUS = 0;\nexport const DEFAULT_SOFTWARE_PROGRAMMING = 0;\nexport const DEFAULT_SOFTWARE_BBS = 0;\nexport const DEFAULT_SOFTWARE_OTHER = 0;\n\nexport const DEFAULT_WORK_POSITION = 0;\nexport const DEFAULT_WORK_SALARY = 0;\n\nexport enum Mood {\n  bad,\n  normal,\n  good,\n  excellent,\n}\n\nexport enum Status {\n  newbie,\n  programmer,\n  hacker,\n}\n\nexport enum Actions {\n  computer,\n  software,\n  hacking,\n  bbs,\n  job,\n  entertainment,\n}\n\nexport enum Computer {\n  no,\n  c386,\n  c486,\n}\n\nexport enum Memory {\n  no,\n  mb4,\n  mb8,\n  mb16,\n}\n\nexport enum Disk {\n  no,\n  mb210,\n}\n\nexport enum Modem {\n  no,\n  mb2400,\n}\n\nexport enum CD {\n  no,\n  '4x',\n}\n\nexport enum Sound {\n  no,\n  soundBlaster,\n}\n\nexport enum OS {\n  no,\n  windows3,\n  windows95,\n  windowsNt,\n  os2,\n}\n\nexport enum Antivirus {\n  no,\n  avNormal,\n  avHacker,\n}\n\nexport enum Programming {\n  no,\n  pascal,\n  assembler,\n  vb,\n  delphi,\n}\n\nexport enum Bbs {\n  no,\n  ownBbs,\n}\n\nexport enum Other {\n  no,\n  otherSoft,\n}\n\nexport enum Work {\n  unemployed,\n  janitor,\n  plumber,\n  programmer,\n  hacker,\n}\n","import React, { ReactElement, ReactNode, memo, useMemo } from 'react';\nimport { IntlProvider } from 'react-intl';\n\nimport ruMessages from './translations/ru.json';\n\ninterface Provider {\n  children: ReactNode;\n}\n\nconst I18nProvider = ({ children }: Provider): ReactElement => {\n  const messages = useMemo(() => ruMessages, []);\n\n  return (\n    <IntlProvider locale=\"ru\" messages={messages}>\n      {children}\n    </IntlProvider>\n  );\n};\n\nexport default memo(I18nProvider);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  computer: {\n    id: 'Actions.computer',\n    defaultMessage: 'Computer',\n  },\n  software: {\n    id: 'Actions.software',\n    defaultMessage: 'Software',\n  },\n  hacking: {\n    id: 'Actions.hacking',\n    defaultMessage: 'Hacking',\n  },\n  bbs: {\n    id: 'Actions.bbs',\n    defaultMessage: 'BBS',\n  },\n  job: {\n    id: 'Actions.job',\n    defaultMessage: 'Find job',\n  },\n  entertainment: {\n    id: 'Actions.entertainment',\n    defaultMessage: 'Entertainment',\n  },\n});\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { ListGroup } from 'react-bootstrap';\n\nimport messages from './messages';\n\nimport './Actions.css';\n\nexport type ActionsProps = {\n  items: string[];\n};\n\nconst Actions: React.FC<ActionsProps> = ({ items }) => {\n  const intl = useIntl();\n\n  return (\n    <ListGroup className=\"Actions\">\n      {items.map((item) => (\n        <ListGroup.Item key={item}>\n          {intl.formatMessage(messages[item as keyof typeof messages])}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n};\n\nexport default Actions;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  message: {\n    id: 'AgreeScreen.message',\n    defaultMessage: 'When you complete this game, blah blah blah',\n  },\n  heading: {\n    id: 'AgreeScreen.heading',\n    defaultMessage: 'Play and enjoy!',\n  },\n});\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\n\nimport { Agreed as AgreedType } from '../../types';\n\nimport messages from './messages';\n\nimport './AgreeScreen.css';\n\ntype AgreeScreenProps = {\n  handleSetAgree: Dispatch<SetStateAction<AgreedType>>;\n};\n\nconst AgreeScreen: React.FC<AgreeScreenProps> = ({ handleSetAgree }) => {\n  const intl = useIntl();\n\n  return (\n    <Container className=\"AgreeScreen\" fluid>\n      <Row>\n        <Col className=\"AgreeScreen__textHolder\">\n          <h1 className=\"AgreeScreen__heading\">\n            {intl.formatMessage(messages.heading)}\n          </h1>\n          <p>{intl.formatMessage(messages.message)}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"AgreeScreen__buttonHolder\">\n          <Button\n            className=\"AgreeScreen__button\"\n            onClick={() => handleSetAgree(true)}\n          >\n            Okey\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default AgreeScreen;\n","import React from 'react';\n\nimport './Date.css';\n\nexport type DateComponent = {\n  date: string;\n  time: string;\n};\n\nconst Date: React.FC<DateComponent> = ({ date, time }) => {\n  return (\n    <div className=\"DatePanel\">\n      <div className=\"DatePanel__field Date\">{date}</div>\n      <div className=\"DatePanel__field Time\">{`${time}:00`}</div>\n    </div>\n  );\n};\n\nexport default Date;\n","import React from 'react';\n\nimport './Layout.css';\n\ntype Layout = {\n  children: React.ReactNode;\n};\n\nconst Layout: React.FC<Layout> = ({ children }) => {\n  return <div className=\"Layout\">{children}</div>;\n};\n\nexport default Layout;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  no: {\n    id: 'Panel.common.no',\n    defaultMessage: 'No',\n  },\n  money: {\n    id: 'Panel.player.money',\n    defaultMessage: 'Money',\n  },\n  points: {\n    id: 'Panel.player.points',\n    defaultMessage: 'Points',\n  },\n  status: {\n    id: 'Panel.player.status',\n    defaultMessage: 'Status',\n  },\n  mood: {\n    id: 'Panel.player.mood',\n    defaultMessage: 'Mood',\n  },\n  newbie: {\n    id: 'Panel.player.status.newbie',\n    defaultMessage: 'Newbie',\n  },\n  programmer: {\n    id: 'Panel.player.status.programmer',\n    defaultMessage: 'Programmer',\n  },\n  hacker: {\n    id: 'Panel.player.status.hacker',\n    defaultMessage: 'Hacker',\n  },\n  bad: {\n    id: 'Panel.player.mood.bad',\n    defaultMessage: 'Bad',\n  },\n  normal: {\n    id: 'Panel.player.mood.normal',\n    defaultMessage: 'Normal',\n  },\n  good: {\n    id: 'Panel.player.mood.good',\n    defaultMessage: 'Good',\n  },\n  excellent: {\n    id: 'Panel.player.mood.excellent',\n    defaultMessage: 'Excellent',\n  },\n  hardwareHeading: {\n    id: 'Panel.hardware.hardwareHeading',\n    defaultMessage: 'Your computer',\n  },\n  computer: {\n    id: 'Panel.hardware.computer',\n    defaultMessage: 'Computer',\n  },\n  memory: {\n    id: 'Panel.hardware.memory',\n    defaultMessage: 'Memory',\n  },\n  disk: {\n    id: 'Panel.hardware.disk',\n    defaultMessage: 'Disk',\n  },\n  modem: {\n    id: 'Panel.hardware.modem',\n    defaultMessage: 'Modem',\n  },\n  cd: {\n    id: 'Panel.hardware.cd',\n    defaultMessage: 'CD-ROM',\n  },\n  sound: {\n    id: 'Panel.hardware.sound',\n    defaultMessage: 'Sound Blaster',\n  },\n  c386: {\n    id: 'Panel.hardware.computer.c386',\n    defaultMessage: '386DX-40',\n  },\n  c486: {\n    id: 'Panel.hardware.computer.c486',\n    defaultMessage: '486DX-66',\n  },\n  mb4: {\n    id: 'Panel.hardware.memory.mb4',\n    defaultMessage: '4Mb',\n  },\n  mb8: {\n    id: 'Panel.hardware.memory.mb8',\n    defaultMessage: '8Mb',\n  },\n  mb16: {\n    id: 'Panel.hardware.memory.mb16',\n    defaultMessage: '16Mb',\n  },\n  mb210: {\n    id: 'Panel.hardware.disk.mb210',\n    defaultMessage: '210Mb',\n  },\n  mb2400: {\n    id: 'Panel.hardware.modem.mb2400',\n    defaultMessage: '2400Mb',\n  },\n  x4: {\n    id: 'Panel.hardware.cd.x4',\n    defaultMessage: '4x',\n  },\n  soundBlaster: {\n    id: 'Panel.hardware.sound.soundBlaster',\n    defaultMessage: 'Sound Blaster',\n  },\n  softwareHeading: {\n    id: 'Panel.software.softwareHeading',\n    defaultMessage: 'Installed software',\n  },\n  system: {\n    id: 'Panel.software.system',\n    defaultMessage: 'Operation system',\n  },\n  antivirus: {\n    id: 'Panel.software.antivirus',\n    defaultMessage: 'Antivirus',\n  },\n  programming: {\n    id: 'Panel.software.programming',\n    defaultMessage: 'Programming language',\n  },\n  bbs: {\n    id: 'Panel.software.bbs',\n    defaultMessage: 'BBS',\n  },\n  otherSoftware: {\n    id: 'Panel.software.otherSoft',\n    defaultMessage: 'Other software',\n  },\n  windows3: {\n    id: 'Panel.software.os.windows3',\n    defaultMessage: 'Windows 3.11',\n  },\n  windows95: {\n    id: 'Panel.software.os.windows95',\n    defaultMessage: 'Windows 95',\n  },\n  windowsNt: {\n    id: 'Panel.software.os.windowsNt',\n    defaultMessage: 'Windows NT',\n  },\n  os2: {\n    id: 'Panel.software.os.os2',\n    defaultMessage: 'OS/2',\n  },\n  avNormal: {\n    id: 'Panel.software.antivirus.avNormal',\n    defaultMessage: 'Regular',\n  },\n  avHacker: {\n    id: 'Panel.software.antivirus.avHacker',\n    defaultMessage: 'Hacker antivirus',\n  },\n  pascal: {\n    id: 'Panel.software.programming.pascal',\n    defaultMessage: 'Pascal',\n  },\n  assembler: {\n    id: 'Panel.software.programming.assembler',\n    defaultMessage: 'Assembler',\n  },\n  vb: {\n    id: 'Panel.software.programming.vb',\n    defaultMessage: 'Visual Basic',\n  },\n  delphi: {\n    id: 'Panel.software.programming.delphi',\n    defaultMessage: 'Delphi',\n  },\n  ownBbs: {\n    id: 'Panel.software.bbs.ownBbs',\n    defaultMessage: 'Own bbs',\n  },\n  otherSoft: {\n    id: 'Panel.software.other.otherSoft',\n    defaultMessage: 'Other software',\n  },\n});\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './Panel.css';\n\nexport type PanelComponent = {\n  header?: string;\n  fields: { name: string; value: number | string; noTranslate?: boolean }[];\n};\n\nconst Panel: React.FC<PanelComponent> = ({ header, fields }) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"Panel\">\n      {header && (\n        <div className=\"Panel__header\">\n          {intl.formatMessage(messages[header as keyof typeof messages])}\n        </div>\n      )}\n      {fields.map(({ name, value, noTranslate }) => (\n        <p key={name} className=\"Panel__field\">\n          {`${intl.formatMessage(messages[name as keyof typeof messages])} -`}\n          <span>\n            {noTranslate\n              ? value\n              : intl.formatMessage(messages[value as keyof typeof messages])}\n          </span>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Panel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  heading: {\n    id: 'WelcomeScreen.heading',\n    defaultMessage: 'Submit',\n  },\n  enterYourName: {\n    id: 'WelcomeScreen.enterYourName',\n    defaultMessage: 'Enter your name:',\n  },\n});\n","import React, { Dispatch, SetStateAction, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\n\nimport { GAME_NAME } from '../../constants';\n\nimport { PlayerName as PlayerNameType } from '../../types';\n\nimport welcomeImage from './intro.png';\n\nimport messages from './messages';\n\nimport './WelcomeScreen.css';\n\ntype WelcomeScreenProps = {\n  handleSetPlayerName: Dispatch<SetStateAction<PlayerNameType>>;\n};\n\nconst WelcomeScreen: React.FC<WelcomeScreenProps> = ({\n  handleSetPlayerName,\n}) => {\n  const intl = useIntl();\n\n  const inputRef = useRef(null);\n  const [name, setName] = useState<PlayerNameType>(undefined);\n\n  return (\n    <Form className=\"WelcomeScreen\">\n      <Row>\n        <Col>\n          <img src={welcomeImage} alt={GAME_NAME} />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"WelcomeScreen__label\">\n          <Form.Label>{intl.formatMessage(messages.enterYourName)}</Form.Label>\n        </Col>\n        <Col>\n          <Form.Control\n            className=\"WelcomeScreen__input\"\n            type=\"text\"\n            name=\"name\"\n            ref={inputRef}\n            required\n            onChange={({ target: { value } }) => setName(value)}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"WelcomeScreen__buttonHolder\">\n          <Button\n            className=\"WelcomeScreen__button\"\n            onClick={() => handleSetPlayerName(name)}\n          >\n            {intl.formatMessage(messages.heading)}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default WelcomeScreen;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: {\n    id: 'Work.header',\n    defaultMessage: 'Your job',\n  },\n  perDay: {\n    id: 'Work.perDay',\n    defaultMessage: 'per day',\n  },\n  unemployed: {\n    id: 'Work.position.unemployed',\n    defaultMessage: 'Unemployed',\n  },\n  janitor: {\n    id: 'Work.position.janitor',\n    defaultMessage: 'Janitor',\n  },\n  plumber: {\n    id: 'Work.position.plumber',\n    defaultMessage: 'Plumber',\n  },\n  programmer: {\n    id: 'Work.position.programmer',\n    defaultMessage: 'Programmer',\n  },\n  hacker: {\n    id: 'Work.position.hacker',\n    defaultMessage: 'Hacker',\n  },\n});\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './Work.css';\n\nexport type WorkProps = {\n  position: string;\n  salary: number;\n};\n\nconst Work: React.FC<WorkProps> = ({ position, salary }) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"Work\">\n      <div className=\"Panel__header\">{intl.formatMessage(messages.header)}</div>\n      <div className=\"Work__field\">\n        {intl.formatMessage(messages[position as keyof typeof messages])} /\n        {salary}$\n        <span className=\"Work__description\">\n          {intl.formatMessage(messages.perDay)}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Work;\n","import React from 'react';\n\nimport { Actions as ActionsEnum } from '../../constants';\n\nimport { Actions as ActionsComponent } from '../../components';\n\nconst Actions: React.FC = () => {\n  const items = Object.keys(ActionsEnum).filter(\n    (a) => typeof ActionsEnum[a as never] === 'number',\n  );\n\n  return <ActionsComponent items={items} />;\n};\n\nexport default Actions;\n","import {\n  Agreed,\n  Date,\n  Hardware,\n  Player,\n  PlayerName,\n  Software,\n  Work,\n} from '../types';\n\nimport {\n  DEFAULT_DATE,\n  DEFAULT_HARDWARE_CD,\n  DEFAULT_HARDWARE_COMPUTER,\n  DEFAULT_HARDWARE_DISK,\n  DEFAULT_HARDWARE_MEMORY,\n  DEFAULT_HARDWARE_MODEM,\n  DEFAULT_HARDWARE_SOUND,\n  DEFAULT_SOFTWARE_ANTIVIRUS,\n  DEFAULT_SOFTWARE_BBS,\n  DEFAULT_SOFTWARE_OS,\n  DEFAULT_SOFTWARE_OTHER,\n  DEFAULT_SOFTWARE_PROGRAMMING,\n  DEFAULT_USER_MONEY,\n  DEFAULT_USER_MOOD,\n  DEFAULT_USER_NAME,\n  DEFAULT_USER_POINTS,\n  DEFAULT_USER_STATUS,\n  DEFAULT_WORK_POSITION,\n  DEFAULT_WORK_SALARY,\n} from './index';\n\nexport const agreedState: Agreed = false;\nexport const playerNameState: PlayerName = DEFAULT_USER_NAME;\nexport const dateState: Date = DEFAULT_DATE;\n\nexport const userState: Player = {\n  money: DEFAULT_USER_MONEY,\n  points: DEFAULT_USER_POINTS,\n  status: DEFAULT_USER_STATUS,\n  mood: DEFAULT_USER_MOOD,\n};\n\nexport const hardwareState: Hardware = {\n  computer: DEFAULT_HARDWARE_COMPUTER,\n  memory: DEFAULT_HARDWARE_MEMORY,\n  disk: DEFAULT_HARDWARE_DISK,\n  modem: DEFAULT_HARDWARE_MODEM,\n  cd: DEFAULT_HARDWARE_CD,\n  sound: DEFAULT_HARDWARE_SOUND,\n};\n\nexport const softwareState: Software = {\n  os: DEFAULT_SOFTWARE_OS,\n  antivirus: DEFAULT_SOFTWARE_ANTIVIRUS,\n  programming: DEFAULT_SOFTWARE_PROGRAMMING,\n  bbs: DEFAULT_SOFTWARE_BBS,\n  other: DEFAULT_SOFTWARE_OTHER,\n};\n\nexport const workState: Work = {\n  salary: DEFAULT_WORK_SALARY,\n  position: DEFAULT_WORK_POSITION,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { HOUR_DURATION } from '../../constants';\nimport { dateState } from '../../constants/initialState';\n\nimport { Date as DateComponent } from '../../components';\n\nconst DateContainer: React.FC = () => {\n  const [date, setDate] = useState(dateState);\n\n  const d = new Date(date);\n\n  const fullDate = `${d.getDate()}.${d.getMonth() + 1}.${d.getFullYear()}`;\n  const time: string = d.getHours().toString();\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDate(new Date(d.setTime(d.getTime() + 60 * 60 * 1000)).toString());\n    }, HOUR_DURATION);\n\n    return () => clearInterval(interval);\n  });\n\n  return <DateComponent date={fullDate} time={time} />;\n};\n\nexport default DateContainer;\n","import React, { useState } from 'react';\n\nimport { Panel } from '../../components';\n\nimport { hardwareState } from '../../constants/initialState';\n\nimport { CD, Computer, Disk, Memory, Modem, Sound } from '../../constants';\n\nconst Hardware: React.FC = () => {\n  const [hardware] = useState(hardwareState);\n\n  return (\n    <Panel\n      header=\"hardwareHeading\"\n      fields={[\n        { name: 'computer', value: Computer[hardware.computer] },\n        { name: 'memory', value: Memory[hardware.memory] },\n        { name: 'disk', value: Disk[hardware.disk] },\n        { name: 'modem', value: Modem[hardware.modem] },\n        { name: 'cd', value: CD[hardware.cd] },\n        { name: 'sound', value: Sound[hardware.sound] },\n      ]}\n    />\n  );\n};\n\nexport default Hardware;\n","import React from 'react';\n\nconst News: React.FC = () => {\n  return <span>1</span>;\n};\n\nexport default News;\n","import React, { useState } from 'react';\n\nimport { Panel } from '../../components';\n\nimport { Mood, Status } from '../../constants';\nimport { userState } from '../../constants/initialState';\n\nconst Player: React.FC = () => {\n  const [user] = useState(userState);\n\n  return (\n    <Panel\n      fields={[\n        { name: 'money', value: `${user.money}$`, noTranslate: true },\n        { name: 'points', value: user.points, noTranslate: true },\n        { name: 'status', value: Status[user.status] },\n        { name: 'mood', value: Mood[user.mood] },\n      ]}\n    />\n  );\n};\n\nexport default Player;\n","import React, { useState } from 'react';\n\nimport { Panel } from '../../components';\n\nimport { softwareState } from '../../constants/initialState';\n\nimport { Antivirus, Bbs, OS, Other, Programming } from '../../constants';\n\nconst Software: React.FC = () => {\n  const [software] = useState(softwareState);\n\n  return (\n    <Panel\n      header=\"softwareHeading\"\n      fields={[\n        { name: 'system', value: OS[software.os] },\n        { name: 'antivirus', value: Antivirus[software.antivirus] },\n        { name: 'programming', value: Programming[software.programming] },\n        { name: 'bbs', value: Bbs[software.bbs] },\n        { name: 'otherSoftware', value: Other[software.other] },\n      ]}\n    />\n  );\n};\n\nexport default Software;\n","import React, { useState } from 'react';\n\nimport { Work as WorkComponent } from '../../components';\n\nimport { Work as WorkEnums } from '../../constants';\nimport { workState } from '../../constants/initialState';\n\nconst Work: React.FC = () => {\n  const [work] = useState(workState);\n\n  return (\n    <WorkComponent position={WorkEnums[work.position]} salary={work.salary} />\n  );\n};\n\nexport default Work;\n","import React from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport Actions from '../Actions/Actions';\nimport Date from '../Date/Date';\nimport Hardware from '../Hardware/Hardware';\nimport News from '../News/News';\nimport Player from '../Player/Player';\nimport Software from '../Software/Software';\nimport Work from '../Work/Work';\n\nimport './Main.css';\n\nconst Main: React.FC = () => {\n  return (\n    <Container className=\"Main\">\n      <Row>\n        <Col className=\"Main__col\">\n          <Player />\n          <Hardware />\n          <Software />\n        </Col>\n        <Col className=\"Main__col\">\n          <Date />\n          <Work />\n          <Actions />\n          <News />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Main;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  gameTitle: {\n    id: 'App.gameTitle',\n    defaultMessage: 'Computer man {name}',\n  },\n});\n","import React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useIntl } from 'react-intl';\n\nimport Main from '../Main/Main';\n\nimport { AgreeScreen, Layout, WelcomeScreen } from '../../components';\n\nimport { agreedState, playerNameState } from '../../constants/initialState';\n\nimport messages from './messages';\n\nconst App: React.FC = () => {\n  const intl = useIntl();\n\n  const [isAgreed, setAgreed] = useState(agreedState);\n  const [playerName, setPlayerName] = useState(playerNameState);\n\n  return (\n    <Layout>\n      <Helmet\n        title={intl.formatMessage(messages.gameTitle, { name: playerName })}\n      />\n      {!playerName && !isAgreed && (\n        <WelcomeScreen handleSetPlayerName={setPlayerName} />\n      )}\n      {playerName && !isAgreed && <AgreeScreen handleSetAgree={setAgreed} />}\n      {playerName && isAgreed && <Main />}\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport I18nProvider from './i18n/I18nProvider';\n\nimport App from './containers/App/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <I18nProvider>\n      <App />\n    </I18nProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}