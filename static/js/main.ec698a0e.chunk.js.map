{"version":3,"sources":["containers/AppBootstrap/reducer.js","components/ActionsPanel/ActionsPanel.jsx","components/Modals/messages.js","components/Modals/AgreeModal.jsx","components/AppLayout/AppLayout.jsx","components/Modals/SimpleModal.jsx","components/Modals/BbsModal.jsx","components/Modals/ComputerModal.jsx","components/DatePanel/DatePanel.jsx","components/Dictionary/messages.js","components/Dictionary/Dictionary.jsx","components/Modals/EntertainmentModal.jsx","components/Modals/HackingModal.jsx","components/Modals/IntroduceModal.jsx","components/Modals/JobModal.jsx","components/Modals/Modal.jsx","components/NewsPanel/NewsPanel.jsx","components/Panel/Panel.jsx","components/Modals/SoftwareModal.jsx","components/WorkPanel/messages.js","components/WorkPanel/WorkPanel.jsx","components/index.js","store/configureStore.env.js","polyfills/polyfills.env.js","polyfills/polyfills.prod.js","containers/AppBootstrap/types.js","containers/uiRootReducer.js","containers/AppBootstrap/constants.js","containers/ActionsPanel/useActionsPanel.js","containers/ActionsPanel/messages.js","containers/ActionsPanel/ActionsPanel.jsx","containers/uiRootSelector.js","containers/AppBootstrap/selectors.js","containers/PlayerPanel/selectors.js","containers/AppBootstrap/useAppBootstrap.js","containers/AppBootstrap/actions.js","containers/AppBootstrap/messages.js","containers/AppBootstrap/AppBootstrap.jsx","containers/ComputerPanel/selectors.js","containers/ComputerPanel/messages.js","containers/ComputerPanel/ComputerPanel.jsx","containers/DatePanel/selectors.js","utils/TimerCounter/TimerCounter.js","constants/index.js","containers/DatePanel/useDatePanel.js","containers/DatePanel/DatePanel.jsx","containers/NewsPanel/selectors.js","containers/NewsPanel/NewsPanel.jsx","containers/PlayerPanel/messages.js","containers/PlayerPanel/PlayerPanel.jsx","containers/SoftPanel/selectors.js","containers/SoftPanel/messages.js","containers/SoftPanel/SoftPanel.jsx","containers/WorkPanel/selectors.js","containers/WorkPanel/WorkPanel.jsx","containers/index.js","containers/constants.js","serviceWorker.js","store/index.js","store/initialState.js","i18n/index.js","i18n/I18nProvider.jsx","App.jsx","index.jsx","store/rootReducer.js","store/configureStore.prod.js"],"names":["initialState","agreed","player","name","money","points","status","mood","computer","memory","hdd","modem","cd","sound","software","os","antivirus","programming","bbs","other","date","counting","work","position","salary","news","data","state","action","produce","draft","type","payload","types","ActionsPanel","props","items","ListGroup","className","map","item","Item","key","onClick","handleClick","defineMessages","heading","mainText","ok","typeYourName","submit","AgreeModal","intl","useIntl","handleAgreeChange","headingText","useMemo","formatMessage","messages","submitText","Container","fluid","Row","Col","Button","AppLayout","actionsPanel","computerPanel","datePanel","newsPanel","playerPanel","softPanel","workPanel","style","padding","SimpleModal","children","isShown","defaultProps","BbsModal","onClose","role","ComputerModal","DatePanel","time","no","bad","normal","good","excellent","newbie","programmer","hacker","unemployed","locksmith","Dictionary","value","propTypes","PropTypes","string","isRequired","number","EntertainmentModal","HackingModal","IntroduceModal","handlePlayerNameChange","useState","playerName","changeName","inputText","inputRef","useRef","useEffect","current","focus","Form","src","alt","Label","Control","ref","required","onChange","e","target","JobModal","Modal","trigger","header","isHeaderCloseButton","isOpened","toggleModal","handleOpen","useCallback","handleClose","renderTriggerComponent","text","show","onHide","Header","closeButton","Body","NewsPanel","Panel","fields","field","SoftwareModal","perDay","WorkPanel","module","exports","require","Intl","PluralRules","RelativeTimeFormat","CHANGE_PLAYER_NAME","CHANGE_AGREED","TIME_STOP","TIME_START","UPDATE_DATE","combineReducers","reducer","useActionsPanel","computerModal","toggleComputerModal","softwareModal","toggleSoftwareModal","hackingModal","toggleHackingModal","bbsModal","toggleBbsModal","jobModal","toggleJobModal","entertainmentModal","toggleEntertainmentModal","handleComputerModalOpen","handleComputerModalClose","handleSoftwareModalOpen","handleSoftwareModalClose","handleHackingModalOpen","handleHackingModalClose","handleBbsModalOpen","handleBbsModalClose","handleJobModalOpen","handleJobModalClose","handleEntertainmentModalOpen","handleEntertainmentModalClose","hacking","job","entertainment","uiRootSelector","gameSelector","createSelector","uiRoot","agreedSelector","game","playerSelector","playerNameSelector","moneySelector","pointsSelector","statusSelector","moodSelector","useAppBootstrap","dispatch","useDispatch","useSelector","isAgreed","changePlayerName","startTimer","compMan","AppBootstrap","title","compSelector","computerSelector","comp","memorySelector","hddSelector","modemSelector","cdSelector","soundSelector","ComputerPanel","selectors","panelProps","allDateSelector","dateFullSelector","dateSelector","d","Date","getDate","getMonth","getFullYear","timeSelector","getHours","isCountingSelector","TimerCounter","currentDate","isCounting","Promise","resolve","setTimeout","setTime","getTime","toString","useDatePanel","dateFull","updateTime","a","allNewsSelector","newsDataSelector","PlayerPanel","softwareSelector","osSelector","soft","antivirusSelector","programmingSelector","bbsSelector","otherSelector","SoftPanel","allWorkSelector","positionSelector","salarySelector","Boolean","window","location","hostname","match","store","configureStore","I18nProvider","memo","activeLocale","getUserLocale","ruMessages","locale","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","UI_ROOT_STORE_SLICE_NAME","additionalMiddlewares","composeEnhancers","compose","middlewares","enhancers","applyMiddleware","createStore","rootReducer"],"mappings":"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","file":"static/js/main.ec698a0e.chunk.js","sourcesContent":["import produce from 'immer';\n\nimport * as types from './types';\n\nexport const initialState = {\n  agreed: false,\n  player: {\n    name: null,\n    money: 60,\n    points: 0,\n    status: 0,\n    mood: 1,\n  },\n  computer: {\n    computer: 0,\n    memory: 0,\n    hdd: 0,\n    modem: 0,\n    cd: 0,\n    sound: 0,\n  },\n  software: {\n    os: 0,\n    antivirus: 0,\n    programming: 0,\n    bbs: 0,\n    other: 0,\n  },\n  date: {\n    date: 'Thu Jan 01 1998 09:00:00 GMT+0100 (Central European Standard Time)',\n    counting: false,\n  },\n  work: {\n    position: 0,\n    salary: 0,\n  },\n  news: {\n    data: '',\n  },\n};\n\nexport default (state = initialState, action) =>\n  /* eslint-disable-next-line */\n  produce(state, (draft) => {\n    const { type, payload } = action;\n\n    switch (type) {\n      case types.CHANGE_PLAYER_NAME: {\n        draft.player = { ...draft.player, name: payload };\n\n        break;\n      }\n\n      case types.CHANGE_AGREED: {\n        draft.agreed = true;\n\n        break;\n      }\n\n      case types.TIME_START: {\n        draft.date.counting = true;\n\n        break;\n      }\n\n      case types.TIME_STOP: {\n        draft.date.counting = false;\n\n        break;\n      }\n\n      case types.UPDATE_DATE: {\n        const { date } = payload;\n\n        draft.date = {\n          ...draft.date,\n          date,\n        };\n\n        break;\n      }\n\n      default: {\n        return initialState;\n      }\n    }\n  });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListGroup } from 'react-bootstrap';\n\nimport './ActionsPanel.css';\n\nconst ActionsPanel = (props) => {\n  const { items } = props;\n\n  return (\n    <ListGroup className=\"ActionsPanel\">\n      {items.map((item) => (\n        <ListGroup.Item key={item.name} onClick={item.handleClick}>\n          {item.name}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n};\n\nActionsPanel.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      handleClick: PropTypes.func.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ActionsPanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  heading: 'Play and enjoy',\n  mainText: 'When you complete this game, blah blah blah',\n  ok: 'OK',\n  typeYourName: 'Type your name here',\n  submit: 'Submit',\n});\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './AgreeModal.css';\n\nconst AgreeModal = (props) => {\n  const intl = useIntl();\n  const { handleAgreeChange } = props;\n\n  const headingText = useMemo(() => intl.formatMessage(messages.heading), [\n    intl,\n  ]);\n  const mainText = useMemo(() => intl.formatMessage(messages.mainText), [intl]);\n  const submitText = useMemo(() => intl.formatMessage(messages.ok), [intl]);\n\n  return (\n    <Container className=\"AgreeModal\" fluid>\n      <Row>\n        <Col className=\"AgreeModal__textHolder\">\n          <h1 className=\"AgreeModal__heading\">{headingText}</h1>\n          <p>{mainText}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"AgreeModal__buttonHolder\">\n          <Button\n            className=\"AgreeModal__button\"\n            onClick={() => handleAgreeChange()}\n          >\n            {submitText}\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nAgreeModal.propTypes = {\n  handleAgreeChange: PropTypes.func.isRequired,\n};\n\nexport default AgreeModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport './AppLayout.css';\n\nconst AppLayout = (props) => {\n  const {\n    actionsPanel,\n    computerPanel,\n    datePanel,\n    newsPanel,\n    playerPanel,\n    softPanel,\n    workPanel,\n  } = props;\n\n  return (\n    <Container className=\"Game\" fluid>\n      <Row>\n        <Col style={{ padding: '5px' }}>\n          {playerPanel}\n          {computerPanel}\n          {softPanel}\n        </Col>\n        <Col style={{ padding: '5px' }}>\n          {datePanel}\n          {workPanel}\n          {actionsPanel}\n          {newsPanel}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nAppLayout.propTypes = {\n  playerPanel: PropTypes.node.isRequired,\n  computerPanel: PropTypes.node.isRequired,\n  softPanel: PropTypes.node.isRequired,\n  datePanel: PropTypes.node.isRequired,\n  workPanel: PropTypes.node.isRequired,\n  actionsPanel: PropTypes.node.isRequired,\n  newsPanel: PropTypes.node.isRequired,\n};\n\nexport default AppLayout;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\n\r\nimport './SimpleModal.css';\r\n\r\nconst SimpleModal = (props) => {\r\n  const { children, isShown } = props;\r\n\r\n  if (!isShown) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Container className=\"SimpleModal\" fluid>\r\n      <Row>\r\n        <Col>{children}</Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nSimpleModal.propTypes = {\r\n  isShown: PropTypes.bool.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nSimpleModal.defaultProps = {\r\n  children: [],\r\n};\r\n\r\nexport default SimpleModal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst BbsModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      BBS will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nBbsModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nBbsModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default BbsModal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst ComputerModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Computer will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nComputerModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nComputerModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default ComputerModal;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './DatePanel.css';\n\nconst DatePanel = (props) => {\n  const { date, time } = props;\n\n  return (\n    <div className=\"DatePanel\">\n      <div className=\"DatePanel__field Date\">{date}</div>\n      <div className=\"DatePanel__field Time\">{`${time}:00`}</div>\n    </div>\n  );\n};\n\nDatePanel.propTypes = {\n  date: PropTypes.string.isRequired,\n  time: PropTypes.number.isRequired,\n};\n\nexport default DatePanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  no: 'No',\n  bad: 'Bad',\n  normal: 'Normal',\n  good: 'Good',\n  excellent: 'Excellent',\n  newbie: 'Newbie',\n  programmer: 'Programmer',\n  hacker: 'Hacker',\n  unemployed: 'Unemployed',\n  locksmith: 'Locksmith',\n});\n","import PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nconst Dictionary = (props) => {\n  const intl = useIntl();\n  const { name, value } = props;\n\n  const values = {\n    status: [\n      intl.formatMessage(messages.newbie),\n      intl.formatMessage(messages.programmer),\n      intl.formatMessage(messages.hacker),\n    ],\n    mood: [\n      intl.formatMessage(messages.bad),\n      intl.formatMessage(messages.normal),\n      intl.formatMessage(messages.good),\n      intl.formatMessage(messages.excellent),\n    ],\n    computer: [intl.formatMessage(messages.no), '386DX-40', '486DX-66'],\n    memory: [intl.formatMessage(messages.no), 4, 16, 32],\n    hdd: [intl.formatMessage(messages.no), 210],\n    modem: [intl.formatMessage(messages.no), 2400],\n    cd: [intl.formatMessage(messages.no), 4],\n    sound: [intl.formatMessage(messages.no), 'Sound Blaster'],\n    os: [\n      intl.formatMessage(messages.no),\n      'Windows 3.11',\n      'Windows 95',\n      'Windows NT 4.0',\n      'OS/2 5.0 Warp',\n    ],\n    antivirus: [intl.formatMessage(messages.no)],\n    programming: [\n      intl.formatMessage(messages.no),\n      'Pascal',\n      'Assembler',\n      'Visual Basic',\n      'Delphi 3.0',\n    ],\n    bbs: [intl.formatMessage(messages.no)],\n    other: [intl.formatMessage(messages.no)],\n    position: [\n      intl.formatMessage(messages.unemployed),\n      intl.formatMessage(messages.locksmith),\n    ],\n  };\n\n  return values[name][value];\n};\n\nDictionary.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Dictionary;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst EntertainmentModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Entertainment will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nEntertainmentModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nEntertainmentModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default EntertainmentModal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst HackingModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Hacking will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nHackingModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nHackingModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default HackingModal;\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './IntroduceModal.css';\n\nconst IntroduceModal = (props) => {\n  const intl = useIntl();\n  const { handlePlayerNameChange } = props;\n\n  const [playerName, changeName] = useState(null);\n\n  const submitText = useMemo(() => intl.formatMessage(messages.submit), [intl]);\n  const inputText = useMemo(() => intl.formatMessage(messages.typeYourName), [\n    intl,\n  ]);\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  return (\n    <Form className=\"IntroduceModal\">\n      <Row>\n        <Col>\n          <img src=\"assets/intro.png\" alt=\"Intro\" />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"IntroduceModal__label\">\n          <Form.Label>{inputText}</Form.Label>\n        </Col>\n        <Col>\n          <Form.Control\n            ref={inputRef}\n            className=\"IntroduceModal__input\"\n            type=\"text\"\n            name=\"name\"\n            required\n            onChange={(e) => changeName(e.target.value)}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"IntroduceModal__buttonHolder\">\n          <Button\n            className=\"IntroduceModal__button\"\n            onClick={() => handlePlayerNameChange(playerName)}\n          >\n            {submitText}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nIntroduceModal.propTypes = {\n  handlePlayerNameChange: PropTypes.func.isRequired,\n};\n\nexport default IntroduceModal;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst JobModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Job will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nJobModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nJobModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default JobModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal as RBModal } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst Modal = (props) => {\n  const { children, trigger, header, isHeaderCloseButton } = props;\n  const [isOpened, toggleModal] = useState(false);\n\n  const handleOpen = useCallback(() => {\n    toggleModal(true);\n  }, [toggleModal]);\n\n  const handleClose = useCallback(() => {\n    toggleModal(false);\n  }, [toggleModal]);\n\n  const renderTriggerComponent = useMemo(\n    () => (\n      <Button className={trigger.className} onClick={handleOpen}>\n        {trigger.text}\n      </Button>\n    ),\n    [trigger, handleOpen],\n  );\n\n  return (\n    <>\n      {renderTriggerComponent}\n      <RBModal show={isOpened} onHide={handleClose}>\n        {header && (\n          <RBModal.Header closeButton={isHeaderCloseButton}>\n            {header}\n          </RBModal.Header>\n        )}\n        <RBModal.Body>{children}</RBModal.Body>\n      </RBModal>\n    </>\n  );\n};\n\nModal.propTypes = {\n  trigger: PropTypes.shape({\n    text: PropTypes.string,\n    className: PropTypes.string,\n    icon: PropTypes.string,\n  }).isRequired,\n  children: PropTypes.node.isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  isHeaderCloseButton: PropTypes.bool,\n};\n\nModal.defaultProps = {\n  header: false,\n  isHeaderCloseButton: true,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewsPanel.css';\n\nconst NewsPanel = (props) => {\n  const { data } = props;\n\n  return <div className=\"NewsPanel\">{data}</div>;\n};\n\nNewsPanel.propTypes = {\n  data: PropTypes.string.isRequired,\n};\n\nexport default NewsPanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Panel.css';\n\nconst Panel = (props) => {\n  const { header, fields } = props;\n\n  return (\n    <div className=\"Panel\">\n      {header && <div className=\"Panel__header\">{header}</div>}\n      {fields.map((field) => (\n        <p key={field.name} className=\"Panel__field\">\n          {`${field.name} -`}\n          <span>{field.value}</span>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nPanel.propTypes = {\n  fields: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.node,\n      ]),\n    }),\n  ).isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nPanel.defaultProps = {\n  header: false,\n};\n\nexport default Panel;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SimpleModal from './SimpleModal';\r\n\r\nconst SoftwareModal = (props) => {\r\n  const { isShown, onClose } = props;\r\n\r\n  return (\r\n    <SimpleModal isShown={isShown}>\r\n      Software will be here.{' '}\r\n      <span role=\"presentation\" onClick={onClose}>\r\n        Close\r\n      </span>\r\n    </SimpleModal>\r\n  );\r\n};\r\n\r\nSoftwareModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  isShown: PropTypes.bool,\r\n};\r\n\r\nSoftwareModal.defaultProps = {\r\n  isShown: false,\r\n};\r\n\r\nexport default SoftwareModal;\r\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Your job',\n  perDay: 'per day',\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './WorkPanel.css';\n\nconst WorkPanel = (props) => {\n  const intl = useIntl();\n  const { position, salary } = props;\n\n  return (\n    <div className=\"WorkPanel\">\n      <div className=\"Panel__header\">{intl.formatMessage(messages.header)}</div>\n      <div className=\"WorkPanel__field\">\n        {position} /{salary}$\n        <span className=\"WorkPanel__description\">\n          {intl.formatMessage(messages.perDay)}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nWorkPanel.propTypes = {\n  position: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  salary: PropTypes.number.isRequired,\n};\n\nexport default WorkPanel;\n","import ActionsPanel from './ActionsPanel/ActionsPanel';\nimport AgreeModal from './Modals/AgreeModal';\nimport AppLayout from './AppLayout/AppLayout';\nimport BbsModal from './Modals/BbsModal';\nimport ComputerModal from './Modals/ComputerModal';\nimport DatePanel from './DatePanel/DatePanel';\nimport Dictionary from './Dictionary/Dictionary';\nimport EntertainmentModal from './Modals/EntertainmentModal';\nimport HackingModal from './Modals/HackingModal';\nimport IntroduceModal from './Modals/IntroduceModal';\nimport JobModal from './Modals/JobModal';\nimport Modal from './Modals/Modal';\nimport NewsPanel from './NewsPanel/NewsPanel';\nimport Panel from './Panel/Panel';\nimport SoftwareModal from './Modals/SoftwareModal';\nimport WorkPanel from './WorkPanel/WorkPanel';\n\nexport {\n  ActionsPanel,\n  AgreeModal,\n  AppLayout,\n  BbsModal,\n  ComputerModal,\n  DatePanel,\n  Dictionary,\n  EntertainmentModal,\n  HackingModal,\n  IntroduceModal,\n  JobModal,\n  NewsPanel,\n  Modal,\n  Panel,\n  SoftwareModal,\n  WorkPanel,\n};\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod');\n} else {\n  module.exports = require('./configureStore.dev');\n}\n","if (process.env.NODE_ENV === 'production') {\n  require('./polyfills.prod');\n} else {\n  require('./polyfills.dev');\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\n\nif (!Intl.PluralRules) {\n  require('@formatjs/intl-pluralrules/polyfill');\n  require('@formatjs/intl-pluralrules/dist/locale-data/en');\n  require('@formatjs/intl-pluralrules/dist/locale-data/ru');\n}\n\nif (!Intl.RelativeTimeFormat) {\n  require('@formatjs/intl-relativetimeformat/polyfill');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/en');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/ru');\n}\n","export const CHANGE_PLAYER_NAME = 'CHANGE_PLAYER_NAME';\nexport const CHANGE_AGREED = 'CHANGE_AGREED';\nexport const TIME_STOP = 'TIME_STOP';\nexport const TIME_START = 'TIME_START';\nexport const UPDATE_DATE = 'UPDATE_DATE';\n","import { combineReducers } from 'redux';\n\nimport reducer from './AppBootstrap/reducer';\nimport { STORE_SLICE_NAME as APP_STORE_SLICE_NAME } from './AppBootstrap/constants';\n\nconst uiRootReducer = combineReducers({\n  [APP_STORE_SLICE_NAME]: reducer,\n});\n\nexport default uiRootReducer;\n","export const STORE_SLICE_NAME = 'app';\n","import { useCallback, useState } from 'react';\n\nconst useActionsPanel = () => {\n  const [computerModal, toggleComputerModal] = useState(false);\n  const [softwareModal, toggleSoftwareModal] = useState(false);\n  const [hackingModal, toggleHackingModal] = useState(false);\n  const [bbsModal, toggleBbsModal] = useState(false);\n  const [jobModal, toggleJobModal] = useState(false);\n  const [entertainmentModal, toggleEntertainmentModal] = useState(false);\n\n  const handleComputerModalOpen = useCallback(() => {\n    toggleComputerModal(true);\n  }, []);\n\n  const handleComputerModalClose = useCallback(() => {\n    toggleComputerModal(false);\n  }, []);\n\n  const handleSoftwareModalOpen = useCallback(() => {\n    toggleSoftwareModal(true);\n  }, []);\n\n  const handleSoftwareModalClose = useCallback(() => {\n    toggleSoftwareModal(false);\n  }, []);\n\n  const handleHackingModalOpen = useCallback(() => {\n    toggleHackingModal(true);\n  }, []);\n\n  const handleHackingModalClose = useCallback(() => {\n    toggleHackingModal(false);\n  }, []);\n\n  const handleBbsModalOpen = useCallback(() => {\n    toggleBbsModal(true);\n  }, []);\n\n  const handleBbsModalClose = useCallback(() => {\n    toggleBbsModal(false);\n  }, []);\n\n  const handleJobModalOpen = useCallback(() => {\n    toggleJobModal(true);\n  }, []);\n\n  const handleJobModalClose = useCallback(() => {\n    toggleJobModal(false);\n  }, []);\n\n  const handleEntertainmentModalOpen = useCallback(() => {\n    toggleEntertainmentModal(true);\n  }, []);\n\n  const handleEntertainmentModalClose = useCallback(() => {\n    toggleEntertainmentModal(false);\n  }, []);\n\n  return {\n    computerModal,\n    handleComputerModalOpen,\n    handleComputerModalClose,\n    softwareModal,\n    handleSoftwareModalOpen,\n    handleSoftwareModalClose,\n    hackingModal,\n    handleHackingModalOpen,\n    handleHackingModalClose,\n    bbsModal,\n    handleBbsModalOpen,\n    handleBbsModalClose,\n    jobModal,\n    handleJobModalOpen,\n    handleJobModalClose,\n    entertainmentModal,\n    handleEntertainmentModalOpen,\n    handleEntertainmentModalClose,\n  };\n};\n\nexport default useActionsPanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  computer: 'Computer',\n  software: 'Software',\n  hacking: 'Hacking',\n  bbs: 'BBS`s',\n  job: 'Find job',\n  entertainment: 'Entertainment',\n});\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport useActionsPanel from './useActionsPanel';\n\nimport messages from './messages';\n\nimport {\n  ActionsPanel as ActionsPanelComponent,\n  BbsModal,\n  ComputerModal,\n  EntertainmentModal,\n  HackingModal,\n  JobModal,\n  SoftwareModal,\n} from '~/components';\n\nconst ActionsPanel = () => {\n  const intl = useIntl();\n  const {\n    computerModal,\n    handleComputerModalOpen,\n    handleComputerModalClose,\n    softwareModal,\n    handleSoftwareModalOpen,\n    handleSoftwareModalClose,\n    hackingModal,\n    handleHackingModalOpen,\n    handleHackingModalClose,\n    bbsModal,\n    handleBbsModalOpen,\n    handleBbsModalClose,\n    jobModal,\n    handleJobModalOpen,\n    handleJobModalClose,\n    entertainmentModal,\n    handleEntertainmentModalOpen,\n    handleEntertainmentModalClose,\n  } = useActionsPanel();\n\n  const items = [\n    {\n      name: intl.formatMessage(messages.computer),\n      handleClick: handleComputerModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.software),\n      handleClick: handleSoftwareModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.hacking),\n      handleClick: handleHackingModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.bbs),\n      handleClick: handleBbsModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.job),\n      handleClick: handleJobModalOpen,\n    },\n    {\n      name: intl.formatMessage(messages.entertainment),\n      handleClick: handleEntertainmentModalOpen,\n    },\n  ];\n\n  return (\n    <>\n      <ComputerModal\n        isShown={computerModal}\n        onClose={handleComputerModalClose}\n      />\n      <SoftwareModal\n        isShown={softwareModal}\n        onClose={handleSoftwareModalClose}\n      />\n      <HackingModal isShown={hackingModal} onClose={handleHackingModalClose} />\n      <BbsModal isShown={bbsModal} onClose={handleBbsModalClose} />\n      <JobModal isShown={jobModal} onClose={handleJobModalClose} />\n      <EntertainmentModal\n        isShown={entertainmentModal}\n        onClose={handleEntertainmentModalClose}\n      />\n      <ActionsPanelComponent items={items} />\n    </>\n  );\n};\n\nexport default ActionsPanel;\n","import { STORE_SLICE_NAME } from './constants';\n\nconst uiRootSelector = (state) => state[STORE_SLICE_NAME];\n\nexport default uiRootSelector;\n","import { createSelector } from 'reselect';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const gameSelector = createSelector(uiRootSelector, (uiRoot) => uiRoot);\n\nexport const agreedSelector = createSelector(\n  gameSelector,\n  (game) => game.agreed,\n);\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const playerSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const playerNameSelector = createSelector(\n  playerSelector,\n  (player) => player.name,\n);\n\nexport const moneySelector = createSelector(\n  playerSelector,\n  (player) => player.money,\n);\n\nexport const pointsSelector = createSelector(\n  playerSelector,\n  (player) => player.points,\n);\n\nexport const statusSelector = createSelector(\n  playerSelector,\n  (player) => player.status,\n);\n\nexport const moodSelector = createSelector(\n  playerSelector,\n  (player) => player.mood,\n);\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { agree, changePlayerName, timeStart } from './actions';\nimport { agreedSelector } from './selectors';\n\nimport { playerNameSelector } from '../PlayerPanel/selectors';\n\nconst useAppBootstrap = () => {\n  const dispatch = useDispatch();\n\n  const playerName = useSelector(playerNameSelector);\n  const isAgreed = useSelector(agreedSelector);\n\n  const handleAgreeChange = useCallback(() => {\n    dispatch(agree());\n  }, [dispatch]);\n\n  const handlePlayerNameChange = useCallback(\n    (payload) => {\n      dispatch(changePlayerName(payload));\n    },\n    [dispatch],\n  );\n\n  const startTimer = useCallback(() => {\n    dispatch(timeStart());\n  }, [dispatch]);\n\n  return {\n    playerName,\n    isAgreed,\n\n    handleAgreeChange,\n    handlePlayerNameChange,\n    startTimer,\n  };\n};\n\nexport default useAppBootstrap;\n","import * as types from './types';\n\nexport const changePlayerName = (payload) => ({\n  type: types.CHANGE_PLAYER_NAME,\n  payload,\n});\n\nexport const agree = () => ({\n  type: types.CHANGE_AGREED,\n});\n\nexport const timeStop = () => ({\n  type: types.TIME_STOP,\n});\n\nexport const timeStart = () => ({\n  type: types.TIME_START,\n});\n\nexport const updateDate = (payload) => ({\n  type: types.UPDATE_DATE,\n  payload,\n});\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  compMan: 'Computer man',\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport Helmet from 'react-helmet';\n\nimport useAppBootstrap from './useAppBootstrap';\n\nimport messages from './messages';\n\nimport { AgreeModal, IntroduceModal } from '~/components';\n\nconst AppBootstrap = (props) => {\n  const intl = useIntl();\n  const { children } = props;\n  const {\n    handleAgreeChange,\n    handlePlayerNameChange,\n    playerName,\n    isAgreed,\n    startTimer,\n  } = useAppBootstrap();\n\n  if (!playerName && !isAgreed) {\n    return <IntroduceModal handlePlayerNameChange={handlePlayerNameChange} />;\n  }\n\n  if (playerName && !isAgreed) {\n    return <AgreeModal handleAgreeChange={handleAgreeChange} />;\n  }\n\n  startTimer();\n\n  return (\n    <>\n      <Helmet title={`${intl.formatMessage(messages.compMan)} ${playerName}`} />\n      {children}\n    </>\n  );\n};\n\nAppBootstrap.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default AppBootstrap;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const compSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const computerSelector = createSelector(\n  compSelector,\n  (comp) => comp.computer,\n);\n\nexport const memorySelector = createSelector(\n  compSelector,\n  (comp) => comp.memory,\n);\n\nexport const hddSelector = createSelector(compSelector, (comp) => comp.hdd);\n\nexport const modemSelector = createSelector(compSelector, (comp) => comp.modem);\n\nexport const cdSelector = createSelector(compSelector, (comp) => comp.cd);\n\nexport const soundSelector = createSelector(compSelector, (comp) => comp.sound);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Your computer',\n  computer: 'Computer',\n  memory: 'RAM',\n  hdd: 'HDD',\n  modem: 'Modem',\n  cd: 'CD-ROM',\n  sound: 'Sound Blaster',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst ComputerPanel = () => {\n  const intl = useIntl();\n\n  const computer = useSelector(selectors.computerSelector);\n  const memory = useSelector(selectors.memorySelector);\n  const hdd = useSelector(selectors.hddSelector);\n  const modem = useSelector(selectors.modemSelector);\n  const cd = useSelector(selectors.cdSelector);\n  const sound = useSelector(selectors.soundSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      {\n        name: intl.formatMessage(messages.computer),\n        value: <Dictionary name=\"computer\" value={computer} />,\n      },\n      {\n        name: intl.formatMessage(messages.memory),\n        value: <Dictionary name=\"memory\" value={memory} />,\n      },\n      {\n        name: intl.formatMessage(messages.hdd),\n        value: <Dictionary name=\"hdd\" value={hdd} />,\n      },\n      {\n        name: intl.formatMessage(messages.modem),\n        value: <Dictionary name=\"modem\" value={modem} />,\n      },\n      {\n        name: intl.formatMessage(messages.cd),\n        value: <Dictionary name=\"cd\" value={cd} />,\n      },\n      {\n        name: intl.formatMessage(messages.sound),\n        value: <Dictionary name=\"sound\" value={sound} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default ComputerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allDateSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const dateFullSelector = createSelector(\n  allDateSelector,\n  (date) => date.date,\n);\n\nexport const dateSelector = createSelector(dateFullSelector, (date) => {\n  const d = new Date(date);\n\n  return `${d.getDate()}.${d.getMonth() + 1}.${d.getFullYear()}`;\n});\n\nexport const timeSelector = createSelector(dateFullSelector, (date) => {\n  const d = new Date(date);\n\n  return d.getHours();\n});\n\nexport const isCountingSelector = createSelector(\n  allDateSelector,\n  (date) => date.counting,\n);\n","import { HOUR_DURATION } from '~/constants';\n\nconst TimerCounter = (currentDate, isCounting) => {\n  return new Promise((resolve) => {\n    const date = new Date(currentDate);\n\n    setTimeout(() => {\n      if (isCounting) {\n        date.setTime(date.getTime() + 60 * 60 * 1000);\n      }\n\n      resolve({\n        date: date.toString(),\n      });\n    }, HOUR_DURATION);\n  });\n};\n\nexport default TimerCounter;\n","export const HOUR_DURATION = 1000;\r\n\r\nexport const MIN_ACTION_TIME = 40 * 1000;\r\nexport const MAX_ACTION_TIME = 60 * 1000;\r\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  dateFullSelector,\n  dateSelector,\n  isCountingSelector,\n  timeSelector,\n} from './selectors';\n\nimport { updateDate } from '../AppBootstrap/actions';\n\nimport { TimerCounter } from '~/utils';\n\nconst useDatePanel = () => {\n  const dispatch = useDispatch();\n\n  const isCounting = useSelector(isCountingSelector);\n  const dateFull = useSelector(dateFullSelector);\n  const date = useSelector(dateSelector);\n  const time = useSelector(timeSelector);\n\n  const updateTime = useCallback(async () => {\n    const currentDate = await TimerCounter(dateFull, isCounting);\n\n    dispatch(updateDate(currentDate));\n  }, [dateFull, dispatch, isCounting]);\n\n  return {\n    date,\n    time,\n\n    updateTime,\n  };\n};\n\nexport default useDatePanel;\n","import React, { useEffect } from 'react';\n\nimport useDatePanel from '~/containers/DatePanel/useDatePanel';\n\nimport { DatePanel as DatePanelComponent } from '~/components';\n\nconst DatePanel = () => {\n  const { date, time, updateTime } = useDatePanel();\n\n  useEffect(() => {\n    updateTime();\n  }, [date, time, updateTime]);\n\n  return <DatePanelComponent date={date} time={time} />;\n};\n\nexport default DatePanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allNewsSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const newsDataSelector = createSelector(\n  allNewsSelector,\n  (news) => news.data,\n);\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { newsDataSelector } from './selectors';\r\n\r\nimport { NewsPanel as NewsPanelComponent } from '~/components';\r\n\r\nconst NewsPanel = () => {\r\n  const data = useSelector(newsDataSelector);\r\n\r\n  return <NewsPanelComponent data={data} />;\r\n};\r\n\r\nexport default NewsPanel;\r\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  money: 'Money',\n  points: 'Points',\n  status: 'Your status',\n  mood: 'Mood',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst PlayerPanel = () => {\n  const intl = useIntl();\n\n  const money = useSelector(selectors.moneySelector);\n  const points = useSelector(selectors.pointsSelector);\n  const status = useSelector(selectors.statusSelector);\n  const mood = useSelector(selectors.moodSelector);\n\n  const panelProps = {\n    header: false,\n    fields: [\n      { name: intl.formatMessage(messages.money), value: `${money}$` },\n      { name: intl.formatMessage(messages.points), value: points },\n      {\n        name: intl.formatMessage(messages.status),\n        value: <Dictionary name=\"status\" value={status} />,\n      },\n      {\n        name: intl.formatMessage(messages.mood),\n        value: <Dictionary name=\"mood\" value={mood} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default PlayerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const softwareSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const osSelector = createSelector(softwareSelector, (soft) => soft.os);\n\nexport const antivirusSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.antivirus,\n);\n\nexport const programmingSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.programming,\n);\n\nexport const bbsSelector = createSelector(softwareSelector, (soft) => soft.bbs);\n\nexport const otherSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.other,\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Installed software',\n  os: 'OS',\n  antivirus: 'Antivirus',\n  programming: 'Programming',\n  bbs: 'BBS',\n  other: 'Other software',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst SoftPanel = () => {\n  const intl = useIntl();\n\n  const os = useSelector(selectors.osSelector);\n  const antivirus = useSelector(selectors.antivirusSelector);\n  const programming = useSelector(selectors.programmingSelector);\n  const bbs = useSelector(selectors.bbsSelector);\n  const other = useSelector(selectors.otherSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      {\n        name: intl.formatMessage(messages.os),\n        value: <Dictionary name=\"os\" value={os} />,\n      },\n      {\n        name: intl.formatMessage(messages.antivirus),\n        value: antivirus || <Dictionary name=\"antivirus\" value={antivirus} />,\n      },\n      {\n        name: intl.formatMessage(messages.programming),\n        value: <Dictionary name=\"programming\" value={programming} />,\n      },\n      {\n        name: intl.formatMessage(messages.bbs),\n        value: <Dictionary name=\"antivirus\" value={bbs} />,\n      },\n      {\n        name: intl.formatMessage(messages.other),\n        value: <Dictionary name=\"antivirus\" value={other} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default SoftPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allWorkSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const positionSelector = createSelector(\n  allWorkSelector,\n  (work) => work.position,\n);\n\nexport const salarySelector = createSelector(\n  allWorkSelector,\n  (work) => work.salary,\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { positionSelector, salarySelector } from './selectors';\n\nimport { Dictionary, WorkPanel as WorkPanelComponent } from '~/components';\n\nconst WorkPanel = () => {\n  const position = useSelector(positionSelector);\n  const salary = useSelector(salarySelector);\n\n  return (\n    <WorkPanelComponent\n      position={<Dictionary name=\"position\" value={position} />}\n      salary={salary}\n    />\n  );\n};\n\nexport default WorkPanel;\n","import reducer from './uiRootReducer';\nimport { STORE_SLICE_NAME as UI_ROOT_STORE_SLICE_NAME } from './constants';\n\nimport ActionsPanel from './ActionsPanel/ActionsPanel';\nimport AppBootstrap from './AppBootstrap/AppBootstrap';\nimport ComputerPanel from './ComputerPanel/ComputerPanel';\nimport DatePanel from './DatePanel/DatePanel';\nimport NewsPanel from './NewsPanel/NewsPanel';\nimport PlayerPanel from './PlayerPanel/PlayerPanel';\nimport SoftPanel from './SoftPanel/SoftPanel';\nimport WorkPanel from './WorkPanel/WorkPanel';\n\nexport {\n  reducer,\n  UI_ROOT_STORE_SLICE_NAME,\n  ActionsPanel,\n  AppBootstrap,\n  ComputerPanel,\n  DatePanel,\n  NewsPanel,\n  PlayerPanel,\n  SoftPanel,\n  WorkPanel,\n};\n","export const STORE_SLICE_NAME = 'game';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import configureStore from './configureStore.env';\nimport initialState from './initialState';\n\n/** @type {import('redux').Store} */\nconst store = configureStore(initialState);\n\nexport default store;\n","export default {};\n","import I18nProvider from './I18nProvider';\n\nexport default I18nProvider;\n","import React, { memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\n\nimport getUserLocale from 'get-user-locale';\n\nimport ruMessages from './translations/ru.json';\n\nconst I18nProvider = ({ children }) => {\n  const activeLocale = getUserLocale();\n\n  const messages = useMemo(\n    // TODO: return user locale using\n    // () => (activeLocale.includes('ru') ? ruMessages : enMessages),\n    () => ruMessages,\n    [],\n  );\n\n  return (\n    <IntlProvider locale={activeLocale} messages={messages}>\n      {children}\n    </IntlProvider>\n  );\n};\n\nI18nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default memo(I18nProvider);\n","import React from 'react';\n\nimport {\n  ActionsPanel,\n  AppBootstrap,\n  ComputerPanel,\n  DatePanel,\n  NewsPanel,\n  PlayerPanel,\n  SoftPanel,\n  WorkPanel,\n} from '~/containers';\nimport { AppLayout } from '~/components';\n\nimport './App.css';\n\nconst App = () => {\n  const playerPanel = <PlayerPanel />;\n  const computerPanel = <ComputerPanel />;\n  const softPanel = <SoftPanel />;\n  const datePanel = <DatePanel />;\n  const workPanel = <WorkPanel />;\n  const actionsPanel = <ActionsPanel />;\n  const newsPanel = <NewsPanel />;\n\n  return (\n    <div className=\"App\">\n      <AppBootstrap>\n        <AppLayout\n          actionsPanel={actionsPanel}\n          datePanel={datePanel}\n          playerPanel={playerPanel}\n          computerPanel={computerPanel}\n          softPanel={softPanel}\n          workPanel={workPanel}\n          newsPanel={newsPanel}\n        />\n      </AppBootstrap>\n    </div>\n  );\n};\n\nexport default App;\n","import './polyfills';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport store from '~/store';\nimport I18nProvider from '~/i18n';\nimport App from '~/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <I18nProvider>\n      <App />\n    </I18nProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux';\n\nimport { UI_ROOT_STORE_SLICE_NAME } from '~/containers';\nimport reducer from '~/containers/AppBootstrap/reducer';\n\nexport default combineReducers({\n  [UI_ROOT_STORE_SLICE_NAME]: reducer,\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\n\nimport rootReducer from './rootReducer';\n\nconst configureStore = (\n  initialState,\n  additionalMiddlewares = [],\n  composeEnhancers = compose,\n) => {\n  const middlewares = [...additionalMiddlewares];\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  return store;\n};\n\nexport default configureStore;\n"],"sourceRoot":""}