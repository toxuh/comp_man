{"version":3,"sources":["containers/AppBootstrap/reducer.js","containers/AppBootstrap/types.js","store/configureStore.env.js","polyfills/polyfills.env.js","polyfills/polyfills.prod.js","components/AppLayout/AppLayout.jsx","components/DatePanel/DatePanel.jsx","components/Modal/Modal.jsx","components/Panel/Panel.jsx","components/index.js","serviceWorker.js","store/index.js","store/initialState.js","i18n/index.js","i18n/I18nProvider.jsx","App.jsx","index.jsx","store/rootReducer.js","store/configureStore.prod.js","containers/uiRootReducer.js","containers/AppBootstrap/constants.js","containers/uiRootSelector.js","containers/AppBootstrap/selectors.js","containers/AppBootstrap/messages.js","containers/AppBootstrap/AppBootstrap.jsx","containers/PlayerPanel/selectors.js","containers/PlayerPanel/messages.js","containers/PlayerPanel/PlayerPanel.jsx","containers/ComputerPanel/selectors.js","containers/ComputerPanel/messages.js","containers/ComputerPanel/ComputerPanel.jsx","containers/SoftPanel/selectors.js","containers/SoftPanel/messages.js","containers/SoftPanel/SoftPanel.jsx","containers/DatePanel/selectors.js","containers/DatePanel/DatePanel.jsx","containers/index.js","containers/constants.js"],"names":["initialState","player","name","money","points","status","mood","computer","memory","hdd","modem","cd","sound","software","os","antivirus","programming","bbs","other","date","time","work","state","action","produce","draft","type","payload","module","exports","require","Intl","PluralRules","RelativeTimeFormat","AppLayout","props","computerPanel","datePanel","playerPanel","softPanel","className","Container","fluid","Row","Col","style","padding","DatePanel","Modal","isOpened","trigger","header","isHeaderCloseButton","children","handleClose","handleOpen","renderTriggerComponent","useMemo","Button","onClick","text","show","onHide","Header","closeButton","Body","defaultProps","Panel","fields","map","field","key","value","Boolean","window","location","hostname","match","store","configureStore","I18nProvider","memo","activeLocale","getUserLocale","messages","ruMessages","locale","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","combineReducers","UI_ROOT_STORE_SLICE_NAME","reducer","additionalMiddlewares","composeEnhancers","compose","middlewares","enhancers","applyMiddleware","createStore","rootReducer","uiRootSelector","playerSelector","createSelector","uiRoot","playerNameSelector","defineMessages","compMan","AppBootstrap","intl","useIntl","playerName","useSelector","title","formatMessage","moneySelector","pointsSelector","statusSelector","moodSelector","bad","normal","good","excellent","newbie","programmer","hacker","PlayerPanel","selectors","PLAYER_DICTIONARY","panelProps","compSelector","computerSelector","comp","memorySelector","hddSelector","modemSelector","cdSelector","soundSelector","ComputerPanel","softwareSelector","osSelector","soft","antivirusSelector","programmingSelector","bbsSelector","otherSelector","SoftPanel","allDateSelector","dateSelector","timeSelector"],"mappings":"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","file":"static/js/main.acd9cd41.chunk.js","sourcesContent":["import produce from 'immer';\n\nimport * as types from './types';\n\nexport const initialState = {\n  player: {\n    name: null,\n    money: 60,\n    points: 0,\n    status: 0,\n    mood: 1,\n  },\n  computer: {\n    computer: 0,\n    memory: 0,\n    hdd: 0,\n    modem: 0,\n    cd: 0,\n    sound: 0,\n  },\n  software: {\n    os: 0,\n    antivirus: 0,\n    programming: 0,\n    bbs: 0,\n    other: 0,\n  },\n  date: {\n    date: '01.01.1998',\n    time: 9,\n  },\n  work: {},\n};\n\nexport default (state = initialState, action) =>\n  /* eslint-disable-next-line */\n  produce(state, (draft) => {\n    const { type, payload } = action;\n\n    switch (type) {\n      case types.UPDATE_DATE: {\n        draft.date = payload;\n\n        break;\n      }\n\n      default: {\n        return initialState;\n      }\n    }\n  });\n","export const UPDATE_DATE = 'RESET_GAME';\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod');\n} else {\n  module.exports = require('./configureStore.dev');\n}\n","if (process.env.NODE_ENV === 'production') {\n  require('./polyfills.prod');\n} else {\n  require('./polyfills.dev');\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\n\nif (!Intl.PluralRules) {\n  require('@formatjs/intl-pluralrules/polyfill');\n  require('@formatjs/intl-pluralrules/dist/locale-data/en');\n  require('@formatjs/intl-pluralrules/dist/locale-data/ru');\n}\n\nif (!Intl.RelativeTimeFormat) {\n  require('@formatjs/intl-relativetimeformat/polyfill');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/en');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/ru');\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport './AppLayout.css';\n\nconst AppLayout = (props) => {\n  const { computerPanel, datePanel, playerPanel, softPanel } = props;\n\n  return (\n    <div className=\"App\">\n      <Container className=\"Game\" fluid>\n        <Row>\n          <Col style={{ padding: '5px' }}>\n            {playerPanel}\n            {computerPanel}\n            {softPanel}\n          </Col>\n          <Col style={{ padding: '5px' }}>{datePanel}</Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nAppLayout.propTypes = {\n  playerPanel: PropTypes.node.isRequired,\n  computerPanel: PropTypes.node.isRequired,\n  softPanel: PropTypes.node.isRequired,\n  datePanel: PropTypes.node.isRequired,\n};\n\nexport default AppLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './DatePanel.css';\n\nconst DatePanel = (props) => {\n  const { date, time } = props;\n\n  return (\n    <div className=\"DatePanel\">\n      <div className=\"DatePanel__field Date\">{date}</div>\n      <div className=\"DatePanel__field Time\">{`${time}:00`}</div>\n    </div>\n  );\n};\n\nDatePanel.propTypes = {\n  date: PropTypes.string.isRequired,\n  time: PropTypes.number.isRequired,\n};\n\nexport default DatePanel;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal as RBModal } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst Modal = (props) => {\n  const {\n    isOpened,\n    trigger,\n    header,\n    isHeaderCloseButton,\n    children,\n    handleClose,\n    handleOpen,\n  } = props;\n\n  const renderTriggerComponent = useMemo(\n    () => (\n      <Button className={trigger.className} onClick={handleOpen}>\n        {trigger.text}\n      </Button>\n    ),\n    [trigger.text, trigger.className, handleOpen],\n  );\n\n  return (\n    <>\n      {renderTriggerComponent}\n      <RBModal show={isOpened} onHide={handleClose}>\n        {header && (\n          <RBModal.Header closeButton={isHeaderCloseButton}>\n            {header}\n          </RBModal.Header>\n        )}\n        <RBModal.Body>{children}</RBModal.Body>\n      </RBModal>\n    </>\n  );\n};\n\nModal.propTypes = {\n  isOpened: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  handleOpen: PropTypes.func.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  trigger: PropTypes.shape({\n    icon: PropTypes.string,\n    text: PropTypes.string,\n    className: PropTypes.string,\n  }).isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  isHeaderCloseButton: PropTypes.bool,\n};\n\nModal.defaultProps = {\n  header: false,\n  isHeaderCloseButton: true,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Panel.css';\n\nconst Panel = (props) => {\n  const { header, fields } = props;\n\n  return (\n    <div className=\"Panel\">\n      {header && <div className=\"Panel__header\">{header}</div>}\n      {fields.map((field) => (\n        <p key={field.name} className=\"Panel__field\">\n          {`${field.name} -`}\n          <span>{field.value}</span>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nPanel.propTypes = {\n  fields: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    }),\n  ).isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nPanel.defaultProps = {\n  header: false,\n};\n\nexport default Panel;\n","import AppLayout from './AppLayout/AppLayout';\nimport DatePanel from './DatePanel/DatePanel';\nimport Modal from './Modal/Modal';\nimport Panel from './Panel/Panel';\n\nexport { AppLayout, DatePanel, Panel, Modal };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import configureStore from './configureStore.env';\nimport initialState from './initialState';\n\n/** @type {import('redux').Store} */\nconst store = configureStore(initialState);\n\nexport default store;\n","export default {};\n","import I18nProvider from './I18nProvider';\n\nexport default I18nProvider;\n","import React, { memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\n\nimport getUserLocale from 'get-user-locale';\n\nimport ruMessages from './translations/ru.json';\n\nconst I18nProvider = ({ children }) => {\n  const activeLocale = getUserLocale();\n\n  const messages = useMemo(\n    // TODO: return user locale using\n    // () => (activeLocale.includes('ru') ? ruMessages : enMessages),\n    () => ruMessages,\n    [],\n  );\n\n  return (\n    <IntlProvider locale={activeLocale} messages={messages}>\n      {children}\n    </IntlProvider>\n  );\n};\n\nI18nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default memo(I18nProvider);\n","import React from 'react';\n\nimport {\n  AppBootstrap,\n  ComputerPanel,\n  DatePanel,\n  PlayerPanel,\n  SoftPanel,\n} from '~/containers';\nimport { AppLayout } from '~/components';\n\nimport './App.css';\n\nconst App = () => {\n  const playerPanel = <PlayerPanel />;\n  const computerPanel = <ComputerPanel />;\n  const softPanel = <SoftPanel />;\n  const datePanel = <DatePanel />;\n\n  return (\n    <AppBootstrap>\n      <AppLayout\n        datePanel={datePanel}\n        playerPanel={playerPanel}\n        computerPanel={computerPanel}\n        softPanel={softPanel}\n      />\n    </AppBootstrap>\n  );\n};\n\nexport default App;\n","import './polyfills';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport store from '~/store';\nimport I18nProvider from '~/i18n';\nimport App from '~/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <I18nProvider>\n      <App />\n    </I18nProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux';\n\nimport { UI_ROOT_STORE_SLICE_NAME } from '~/containers';\nimport reducer from '~/containers/AppBootstrap/reducer';\n\nexport default combineReducers({\n  [UI_ROOT_STORE_SLICE_NAME]: reducer,\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\n\nimport rootReducer from './rootReducer';\n\nconst configureStore = (\n  initialState,\n  additionalMiddlewares = [],\n  composeEnhancers = compose,\n) => {\n  const middlewares = [...additionalMiddlewares];\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","import { combineReducers } from 'redux';\n\nimport reducer from './AppBootstrap/reducer';\nimport { STORE_SLICE_NAME as APP_STORE_SLICE_NAME } from './AppBootstrap/constants';\n\nconst uiRootReducer = combineReducers({\n  [APP_STORE_SLICE_NAME]: reducer,\n});\n\nexport default uiRootReducer;\n","export const STORE_SLICE_NAME = 'app';\n","import { STORE_SLICE_NAME } from './constants';\n\nconst uiRootSelector = (state) => state[STORE_SLICE_NAME];\n\nexport default uiRootSelector;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from '../PlayerPanel/constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const playerSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const playerNameSelector = createSelector(\n  playerSelector,\n  (player) => player.name,\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  compMan: 'Computer man',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport Helmet from 'react-helmet';\n\nimport { playerNameSelector } from './selectors';\n\nimport messages from './messages';\n\nconst AppBootstrap = (props) => {\n  const intl = useIntl();\n  const { children } = props;\n\n  const playerName = useSelector(playerNameSelector);\n\n  if (!playerName) {\n    // We need to show first screen here\n    return null;\n  }\n\n  return (\n    <>\n      <Helmet title={`${intl.formatMessage(messages.compMan)} ${playerName}`} />\n      {children}\n    </>\n  );\n};\n\nAppBootstrap.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default AppBootstrap;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const playerSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const moneySelector = createSelector(\n  playerSelector,\n  (player) => player.money,\n);\n\nexport const pointsSelector = createSelector(\n  playerSelector,\n  (player) => player.points,\n);\n\nexport const statusSelector = createSelector(\n  playerSelector,\n  (player) => player.status,\n);\n\nexport const moodSelector = createSelector(\n  playerSelector,\n  (player) => player.mood,\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  money: 'Money',\n  points: 'Points',\n  status: 'Your status',\n  mood: 'Mood',\n  bad: 'Bad',\n  normal: 'Normal',\n  good: 'Good',\n  excellent: 'Excellent',\n  newbie: 'Newbie',\n  programmer: 'Programmer',\n  hacker: 'Hacker',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Panel as PanelComponent } from '~/components';\n\nconst PlayerPanel = () => {\n  const intl = useIntl();\n\n  const money = useSelector(selectors.moneySelector);\n  const points = useSelector(selectors.pointsSelector);\n  const status = useSelector(selectors.statusSelector);\n  const mood = useSelector(selectors.moodSelector);\n\n  const PLAYER_DICTIONARY = {\n    status: [\n      intl.formatMessage(messages.newbie),\n      intl.formatMessage(messages.programmer),\n      intl.formatMessage(messages.hacker),\n    ],\n    mood: [\n      intl.formatMessage(messages.bad),\n      intl.formatMessage(messages.normal),\n      intl.formatMessage(messages.good),\n      intl.formatMessage(messages.excellent),\n    ],\n  };\n\n  const panelProps = {\n    header: false,\n    fields: [\n      { name: intl.formatMessage(messages.money), value: `${money}$` },\n      { name: intl.formatMessage(messages.points), value: points },\n      {\n        name: intl.formatMessage(messages.status),\n        value: PLAYER_DICTIONARY.status[status],\n      },\n      {\n        name: intl.formatMessage(messages.mood),\n        value: PLAYER_DICTIONARY.mood[mood],\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default PlayerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const compSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const computerSelector = createSelector(\n  compSelector,\n  (comp) => comp.computer,\n);\n\nexport const memorySelector = createSelector(\n  compSelector,\n  (comp) => comp.memory,\n);\n\nexport const hddSelector = createSelector(compSelector, (comp) => comp.hdd);\n\nexport const modemSelector = createSelector(compSelector, (comp) => comp.modem);\n\nexport const cdSelector = createSelector(compSelector, (comp) => comp.cd);\n\nexport const soundSelector = createSelector(compSelector, (comp) => comp.sound);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Your computer',\n  computer: 'Computer',\n  memory: 'RAM',\n  hdd: 'HDD',\n  modem: 'Modem',\n  cd: 'CD-ROM',\n  sound: 'Sound Blaster',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Panel as PanelComponent } from '~/components';\n\nconst ComputerPanel = () => {\n  const intl = useIntl();\n\n  const computer = useSelector(selectors.computerSelector);\n  const memory = useSelector(selectors.memorySelector);\n  const hdd = useSelector(selectors.hddSelector);\n  const modem = useSelector(selectors.modemSelector);\n  const cd = useSelector(selectors.cdSelector);\n  const sound = useSelector(selectors.soundSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      { name: intl.formatMessage(messages.computer), value: computer },\n      { name: intl.formatMessage(messages.memory), value: memory },\n      { name: intl.formatMessage(messages.hdd), value: hdd },\n      { name: intl.formatMessage(messages.modem), value: modem },\n      { name: intl.formatMessage(messages.cd), value: cd },\n      { name: intl.formatMessage(messages.sound), value: sound },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default ComputerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const softwareSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const osSelector = createSelector(softwareSelector, (soft) => soft.os);\n\nexport const antivirusSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.antivirus,\n);\n\nexport const programmingSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.programming,\n);\n\nexport const bbsSelector = createSelector(softwareSelector, (soft) => soft.bbs);\n\nexport const otherSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.other,\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Installed software',\n  os: 'OS',\n  antivirus: 'Antivirus',\n  programming: 'Programming',\n  bbs: 'BBS',\n  other: 'Other software',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Panel as PanelComponent } from '~/components';\n\nconst SoftPanel = () => {\n  const intl = useIntl();\n\n  const os = useSelector(selectors.osSelector);\n  const antivirus = useSelector(selectors.antivirusSelector);\n  const programming = useSelector(selectors.programmingSelector);\n  const bbs = useSelector(selectors.bbsSelector);\n  const other = useSelector(selectors.otherSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      { name: intl.formatMessage(messages.os), value: os },\n      { name: intl.formatMessage(messages.antivirus), value: antivirus },\n      { name: intl.formatMessage(messages.programming), value: programming },\n      { name: intl.formatMessage(messages.bbs), value: bbs },\n      { name: intl.formatMessage(messages.other), value: other },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default SoftPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allDateSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const dateSelector = createSelector(\n  allDateSelector,\n  (date) => date.date,\n);\n\nexport const timeSelector = createSelector(\n  allDateSelector,\n  (date) => date.time,\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { dateSelector, timeSelector } from './selectors';\n\nimport { DatePanel as DatePanelComponent } from '~/components';\n\nconst DatePanel = () => {\n  const date = useSelector(dateSelector);\n  const time = useSelector(timeSelector);\n\n  return <DatePanelComponent date={date} time={time} />;\n};\n\nexport default DatePanel;\n","import reducer from './uiRootReducer';\nimport { STORE_SLICE_NAME as UI_ROOT_STORE_SLICE_NAME } from './constants';\n\nimport AppBootstrap from './AppBootstrap/AppBootstrap';\nimport Modal from './Modal/Modal';\nimport PlayerPanel from './PlayerPanel/PlayerPanel';\nimport ComputerPanel from './ComputerPanel/ComputerPanel';\nimport SoftPanel from './SoftPanel/SoftPanel';\nimport DatePanel from './DatePanel/DatePanel';\n\nexport {\n  reducer,\n  UI_ROOT_STORE_SLICE_NAME,\n  AppBootstrap,\n  DatePanel,\n  Modal,\n  PlayerPanel,\n  ComputerPanel,\n  SoftPanel,\n};\n","export const STORE_SLICE_NAME = 'game';\n"],"sourceRoot":""}