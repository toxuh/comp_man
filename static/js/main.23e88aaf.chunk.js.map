{"version":3,"sources":["containers/AppBootstrap/reducer.js","components/AgreeScreen/messages.js","components/AgreeScreen/AgreeScreen.jsx","components/AppLayout/AppLayout.jsx","components/DatePanel/DatePanel.jsx","components/Dictionary/messages.js","components/Dictionary/Dictionary.jsx","components/IntroduceScreen/messages.js","components/IntroduceScreen/IntroduceScreen.jsx","components/Modal/Modal.jsx","components/Panel/Panel.jsx","components/index.js","store/configureStore.env.js","polyfills/polyfills.env.js","polyfills/polyfills.prod.js","containers/AppBootstrap/types.js","serviceWorker.js","store/index.js","store/initialState.js","i18n/index.js","i18n/I18nProvider.jsx","App.jsx","index.jsx","store/rootReducer.js","store/configureStore.prod.js","containers/uiRootReducer.js","containers/AppBootstrap/constants.js","containers/AppBootstrap/AgreeScreen.jsx","containers/AppBootstrap/actions.js","containers/AppBootstrap/IntroduceScreen.jsx","containers/uiRootSelector.js","containers/AppBootstrap/selectors.js","containers/PlayerPanel/selectors.js","containers/AppBootstrap/useAppBootstrap.js","containers/AppBootstrap/messages.js","containers/AppBootstrap/AppBootstrap.jsx","containers/ComputerPanel/selectors.js","containers/ComputerPanel/messages.js","containers/ComputerPanel/ComputerPanel.jsx","containers/DatePanel/selectors.js","utils/Timer/timerCounter.js","containers/DatePanel/useDatePanel.js","containers/DatePanel/DatePanel.jsx","containers/PlayerPanel/messages.js","containers/PlayerPanel/PlayerPanel.jsx","containers/SoftPanel/selectors.js","containers/SoftPanel/messages.js","containers/SoftPanel/SoftPanel.jsx","containers/index.js","containers/constants.js"],"names":["initialState","agreed","player","name","money","points","status","mood","computer","memory","hdd","modem","cd","sound","software","os","antivirus","programming","bbs","other","date","counting","work","state","action","produce","draft","type","payload","types","defineMessages","heading","mainText","submit","AgreeScreen","props","intl","useIntl","onSubmitAgree","headingText","useMemo","formatMessage","messages","submitText","Container","className","fluid","Row","Col","Button","onClick","AppLayout","computerPanel","datePanel","playerPanel","softPanel","style","padding","DatePanel","time","no","bad","normal","good","excellent","newbie","programmer","hacker","Dictionary","value","propTypes","PropTypes","string","isRequired","number","typeYourName","IntroduceScreen","onPlayerNameChange","useState","playerName","changeName","Form","Control","placeholder","required","onChange","e","target","Modal","isOpened","trigger","header","isHeaderCloseButton","children","handleClose","handleOpen","renderTriggerComponent","text","show","onHide","Header","closeButton","Body","defaultProps","Panel","fields","map","field","key","module","exports","require","Intl","PluralRules","RelativeTimeFormat","CHANGE_PLAYER_NAME","CHANGE_AGREED","TIME_STOP","TIME_START","UPDATE_DATE","Boolean","window","location","hostname","match","store","configureStore","I18nProvider","memo","activeLocale","getUserLocale","ruMessages","locale","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","combineReducers","UI_ROOT_STORE_SLICE_NAME","reducer","additionalMiddlewares","composeEnhancers","compose","middlewares","enhancers","applyMiddleware","createStore","rootReducer","dispatch","useDispatch","handleAgreeChange","useCallback","handlePlayerNameChange","changePlayerName","uiRootSelector","gameSelector","createSelector","uiRoot","agreedSelector","game","playerSelector","playerNameSelector","moneySelector","pointsSelector","statusSelector","moodSelector","useAppBootstrap","useSelector","isAgreed","startTimer","compMan","AppBootstrap","title","compSelector","computerSelector","comp","memorySelector","hddSelector","modemSelector","cdSelector","soundSelector","ComputerPanel","selectors","panelProps","allDateSelector","dateFullSelector","dateSelector","d","Date","getDate","getMonth","getFullYear","timeSelector","getHours","isCountingSelector","counter","currentDate","isCounting","Promise","resolve","setTimeout","setTime","getTime","toString","useDatePanel","dateFull","updateTime","a","useEffect","PlayerPanel","softwareSelector","osSelector","soft","antivirusSelector","programmingSelector","bbsSelector","otherSelector","SoftPanel"],"mappings":"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","file":"static/js/main.23e88aaf.chunk.js","sourcesContent":["import produce from 'immer';\n\nimport * as types from './types';\n\nexport const initialState = {\n  agreed: false,\n  player: {\n    name: null,\n    money: 60,\n    points: 0,\n    status: 0,\n    mood: 1,\n  },\n  computer: {\n    computer: 0,\n    memory: 0,\n    hdd: 0,\n    modem: 0,\n    cd: 0,\n    sound: 0,\n  },\n  software: {\n    os: 0,\n    antivirus: 0,\n    programming: 0,\n    bbs: 0,\n    other: 0,\n  },\n  date: {\n    date: 'Thu Jan 01 1998 09:00:00 GMT+0100 (Central European Standard Time)',\n    counting: false,\n  },\n  work: {},\n};\n\nexport default (state = initialState, action) =>\n  /* eslint-disable-next-line */\n  produce(state, (draft) => {\n    const { type, payload } = action;\n\n    switch (type) {\n      case types.CHANGE_PLAYER_NAME: {\n        draft.player = { ...draft.player, name: payload };\n\n        break;\n      }\n\n      case types.CHANGE_AGREED: {\n        draft.agreed = true;\n\n        break;\n      }\n\n      case types.TIME_START: {\n        draft.date.counting = true;\n\n        break;\n      }\n\n      case types.TIME_STOP: {\n        draft.date.counting = false;\n\n        break;\n      }\n\n      case types.UPDATE_DATE: {\n        const { date } = payload;\n\n        draft.date = {\n          ...draft.date,\n          date,\n        };\n\n        break;\n      }\n\n      default: {\n        return initialState;\n      }\n    }\n  });\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  heading: 'Play and enjoy',\n  mainText: 'When you complete this game, blah blah blah',\n  submit: 'OK',\n});\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './AgreeScreen.css';\n\nconst AgreeScreen = (props) => {\n  const intl = useIntl();\n  const { onSubmitAgree } = props;\n\n  const headingText = useMemo(() => intl.formatMessage(messages.heading), [\n    intl,\n  ]);\n  const mainText = useMemo(() => intl.formatMessage(messages.mainText), [intl]);\n  const submitText = useMemo(() => intl.formatMessage(messages.submit), [intl]);\n\n  return (\n    <Container className=\"AgreeScreen\" fluid>\n      <Row>\n        <Col>\n          <h1>{headingText}</h1>\n        </Col>\n      </Row>\n      <Row>\n        <p>{mainText}</p>\n      </Row>\n      <Row>\n        <Button onClick={() => onSubmitAgree()}>{submitText}</Button>\n      </Row>\n    </Container>\n  );\n};\n\nAgreeScreen.propTypes = {\n  onSubmitAgree: PropTypes.func.isRequired,\n};\n\nexport default AgreeScreen;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport './AppLayout.css';\n\nconst AppLayout = (props) => {\n  const { computerPanel, datePanel, playerPanel, softPanel } = props;\n\n  return (\n    <Container className=\"Game\" fluid>\n      <Row>\n        <Col style={{ padding: '5px' }}>\n          {playerPanel}\n          {computerPanel}\n          {softPanel}\n        </Col>\n        <Col style={{ padding: '5px' }}>{datePanel}</Col>\n      </Row>\n    </Container>\n  );\n};\n\nAppLayout.propTypes = {\n  playerPanel: PropTypes.node.isRequired,\n  computerPanel: PropTypes.node.isRequired,\n  softPanel: PropTypes.node.isRequired,\n  datePanel: PropTypes.node.isRequired,\n};\n\nexport default AppLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './DatePanel.css';\n\nconst DatePanel = (props) => {\n  const { date, time } = props;\n\n  return (\n    <div className=\"DatePanel\">\n      <div className=\"DatePanel__field Date\">{date}</div>\n      <div className=\"DatePanel__field Time\">{`${time}:00`}</div>\n    </div>\n  );\n};\n\nDatePanel.propTypes = {\n  date: PropTypes.string.isRequired,\n  time: PropTypes.number.isRequired,\n};\n\nexport default DatePanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  no: 'No',\n  bad: 'Bad',\n  normal: 'Normal',\n  good: 'Good',\n  excellent: 'Excellent',\n  newbie: 'Newbie',\n  programmer: 'Programmer',\n  hacker: 'Hacker',\n});\n","import PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nconst Dictionary = (props) => {\n  const intl = useIntl();\n  const { name, value } = props;\n\n  const values = {\n    status: [\n      intl.formatMessage(messages.newbie),\n      intl.formatMessage(messages.programmer),\n      intl.formatMessage(messages.hacker),\n    ],\n    mood: [\n      intl.formatMessage(messages.bad),\n      intl.formatMessage(messages.normal),\n      intl.formatMessage(messages.good),\n      intl.formatMessage(messages.excellent),\n    ],\n    computer: [intl.formatMessage(messages.no), '386DX-40', '486DX-66'],\n    memory: [intl.formatMessage(messages.no), 4, 16, 32],\n    hdd: [intl.formatMessage(messages.no), 210],\n    modem: [intl.formatMessage(messages.no), 2400],\n    cd: [intl.formatMessage(messages.no), 4],\n    sound: [intl.formatMessage(messages.no), 'Sound Blaster'],\n    os: [\n      intl.formatMessage(messages.no),\n      'Windows 3.11',\n      'Windows 95',\n      'Windows NT 4.0',\n      'OS/2 5.0 Warp',\n    ],\n    antivirus: [intl.formatMessage(messages.no)],\n    programming: [\n      intl.formatMessage(messages.no),\n      'Pascal',\n      'Assembler',\n      'Visual Basic',\n      'Delphi 3.0',\n    ],\n    bbs: [intl.formatMessage(messages.no)],\n    other: [intl.formatMessage(messages.no)],\n  };\n\n  return values[name][value];\n};\n\nDictionary.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Dictionary;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  typeYourName: 'Type your name here',\n  submit: 'Submit',\n});\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './IntroduceScreen.css';\n\nconst IntroduceScreen = (props) => {\n  const intl = useIntl();\n  const { onPlayerNameChange } = props;\n\n  const [playerName, changeName] = useState(null);\n\n  const submitText = useMemo(() => intl.formatMessage(messages.submit), [intl]);\n\n  return (\n    <Form className=\"IntroduceScreen\">\n      <Row>\n        <Col>\n          <Form.Control\n            type=\"text\"\n            name=\"name\"\n            placeholder={intl.formatMessage(messages.typeYourName)}\n            required\n            onChange={(e) => changeName(e.target.value)}\n          />\n        </Col>\n        <Col>\n          <Button onClick={() => onPlayerNameChange(playerName)}>\n            {submitText}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nIntroduceScreen.propTypes = {\n  onPlayerNameChange: PropTypes.func.isRequired,\n};\n\nexport default IntroduceScreen;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal as RBModal } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst Modal = (props) => {\n  const {\n    isOpened,\n    trigger,\n    header,\n    isHeaderCloseButton,\n    children,\n    handleClose,\n    handleOpen,\n  } = props;\n\n  const renderTriggerComponent = useMemo(\n    () => (\n      <Button className={trigger.className} onClick={handleOpen}>\n        {trigger.text}\n      </Button>\n    ),\n    [trigger.text, trigger.className, handleOpen],\n  );\n\n  return (\n    <>\n      {renderTriggerComponent}\n      <RBModal show={isOpened} onHide={handleClose}>\n        {header && (\n          <RBModal.Header closeButton={isHeaderCloseButton}>\n            {header}\n          </RBModal.Header>\n        )}\n        <RBModal.Body>{children}</RBModal.Body>\n      </RBModal>\n    </>\n  );\n};\n\nModal.propTypes = {\n  isOpened: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  handleOpen: PropTypes.func.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  trigger: PropTypes.shape({\n    icon: PropTypes.string,\n    text: PropTypes.string,\n    className: PropTypes.string,\n  }).isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  isHeaderCloseButton: PropTypes.bool,\n};\n\nModal.defaultProps = {\n  header: false,\n  isHeaderCloseButton: true,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Panel.css';\n\nconst Panel = (props) => {\n  const { header, fields } = props;\n\n  return (\n    <div className=\"Panel\">\n      {header && <div className=\"Panel__header\">{header}</div>}\n      {fields.map((field) => (\n        <p key={field.name} className=\"Panel__field\">\n          {`${field.name} -`}\n          <span>{field.value}</span>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nPanel.propTypes = {\n  fields: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.node,\n      ]),\n    }),\n  ).isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nPanel.defaultProps = {\n  header: false,\n};\n\nexport default Panel;\n","import AgreeScreen from './AgreeScreen/AgreeScreen';\nimport AppLayout from './AppLayout/AppLayout';\nimport DatePanel from './DatePanel/DatePanel';\nimport Dictionary from './Dictionary/Dictionary';\nimport IntroduceScreen from './IntroduceScreen/IntroduceScreen';\nimport Modal from './Modal/Modal';\nimport Panel from './Panel/Panel';\n\nexport {\n  AgreeScreen,\n  AppLayout,\n  DatePanel,\n  Dictionary,\n  IntroduceScreen,\n  Panel,\n  Modal,\n};\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod');\n} else {\n  module.exports = require('./configureStore.dev');\n}\n","if (process.env.NODE_ENV === 'production') {\n  require('./polyfills.prod');\n} else {\n  require('./polyfills.dev');\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\n\nif (!Intl.PluralRules) {\n  require('@formatjs/intl-pluralrules/polyfill');\n  require('@formatjs/intl-pluralrules/dist/locale-data/en');\n  require('@formatjs/intl-pluralrules/dist/locale-data/ru');\n}\n\nif (!Intl.RelativeTimeFormat) {\n  require('@formatjs/intl-relativetimeformat/polyfill');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/en');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/ru');\n}\n","export const CHANGE_PLAYER_NAME = 'CHANGE_PLAYER_NAME';\nexport const CHANGE_AGREED = 'CHANGE_AGREED';\nexport const TIME_STOP = 'TIME_STOP';\nexport const TIME_START = 'TIME_START';\nexport const UPDATE_DATE = 'UPDATE_DATE';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import configureStore from './configureStore.env';\nimport initialState from './initialState';\n\n/** @type {import('redux').Store} */\nconst store = configureStore(initialState);\n\nexport default store;\n","export default {};\n","import I18nProvider from './I18nProvider';\n\nexport default I18nProvider;\n","import React, { memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\n\nimport getUserLocale from 'get-user-locale';\n\nimport ruMessages from './translations/ru.json';\n\nconst I18nProvider = ({ children }) => {\n  const activeLocale = getUserLocale();\n\n  const messages = useMemo(\n    // TODO: return user locale using\n    // () => (activeLocale.includes('ru') ? ruMessages : enMessages),\n    () => ruMessages,\n    [],\n  );\n\n  return (\n    <IntlProvider locale={activeLocale} messages={messages}>\n      {children}\n    </IntlProvider>\n  );\n};\n\nI18nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default memo(I18nProvider);\n","import React from 'react';\n\nimport {\n  AppBootstrap,\n  ComputerPanel,\n  DatePanel,\n  PlayerPanel,\n  SoftPanel,\n} from '~/containers';\nimport { AppLayout } from '~/components';\n\nimport './App.css';\n\nconst App = () => {\n  const playerPanel = <PlayerPanel />;\n  const computerPanel = <ComputerPanel />;\n  const softPanel = <SoftPanel />;\n  const datePanel = <DatePanel />;\n\n  return (\n    <div className=\"App\">\n      <AppBootstrap>\n        <AppLayout\n          datePanel={datePanel}\n          playerPanel={playerPanel}\n          computerPanel={computerPanel}\n          softPanel={softPanel}\n        />\n      </AppBootstrap>\n    </div>\n  );\n};\n\nexport default App;\n","import './polyfills';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport store from '~/store';\nimport I18nProvider from '~/i18n';\nimport App from '~/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <I18nProvider>\n      <App />\n    </I18nProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux';\n\nimport { UI_ROOT_STORE_SLICE_NAME } from '~/containers';\nimport reducer from '~/containers/AppBootstrap/reducer';\n\nexport default combineReducers({\n  [UI_ROOT_STORE_SLICE_NAME]: reducer,\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\n\nimport rootReducer from './rootReducer';\n\nconst configureStore = (\n  initialState,\n  additionalMiddlewares = [],\n  composeEnhancers = compose,\n) => {\n  const middlewares = [...additionalMiddlewares];\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","import { combineReducers } from 'redux';\n\nimport reducer from './AppBootstrap/reducer';\nimport { STORE_SLICE_NAME as APP_STORE_SLICE_NAME } from './AppBootstrap/constants';\n\nconst uiRootReducer = combineReducers({\n  [APP_STORE_SLICE_NAME]: reducer,\n});\n\nexport default uiRootReducer;\n","export const STORE_SLICE_NAME = 'app';\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { agree } from './actions';\n\nimport { AgreeScreen as AgreeScreenComponent } from '~/components';\n\nconst AgreeScreen = () => {\n  const dispatch = useDispatch();\n\n  const handleAgreeChange = useCallback(() => {\n    dispatch(agree());\n  }, [dispatch]);\n\n  return <AgreeScreenComponent onSubmitAgree={handleAgreeChange} />;\n};\n\nexport default AgreeScreen;\n","import * as types from './types';\n\nexport const changePlayerName = (payload) => ({\n  type: types.CHANGE_PLAYER_NAME,\n  payload,\n});\n\nexport const agree = () => ({\n  type: types.CHANGE_AGREED,\n});\n\nexport const timeStop = () => ({\n  type: types.TIME_STOP,\n});\n\nexport const timeStart = () => ({\n  type: types.TIME_START,\n});\n\nexport const updateDate = (payload) => ({\n  type: types.UPDATE_DATE,\n  payload,\n});\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { changePlayerName } from './actions';\n\nimport { IntroduceScreen as IntroduceScreenComponent } from '~/components';\n\nconst IntroduceScreen = () => {\n  const dispatch = useDispatch();\n\n  const handlePlayerNameChange = useCallback(\n    (payload) => {\n      dispatch(changePlayerName(payload));\n    },\n    [dispatch],\n  );\n\n  return (\n    <IntroduceScreenComponent onPlayerNameChange={handlePlayerNameChange} />\n  );\n};\n\nexport default IntroduceScreen;\n","import { STORE_SLICE_NAME } from './constants';\n\nconst uiRootSelector = (state) => state[STORE_SLICE_NAME];\n\nexport default uiRootSelector;\n","import { createSelector } from 'reselect';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const gameSelector = createSelector(uiRootSelector, (uiRoot) => uiRoot);\n\nexport const agreedSelector = createSelector(\n  gameSelector,\n  (game) => game.agreed,\n);\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const playerSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const playerNameSelector = createSelector(\n  playerSelector,\n  (player) => player.name,\n);\n\nexport const moneySelector = createSelector(\n  playerSelector,\n  (player) => player.money,\n);\n\nexport const pointsSelector = createSelector(\n  playerSelector,\n  (player) => player.points,\n);\n\nexport const statusSelector = createSelector(\n  playerSelector,\n  (player) => player.status,\n);\n\nexport const moodSelector = createSelector(\n  playerSelector,\n  (player) => player.mood,\n);\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { timeStart } from './actions';\nimport { agreedSelector } from './selectors';\n\nimport { playerNameSelector } from '../PlayerPanel/selectors';\n\nconst useAppBootstrap = () => {\n  const dispatch = useDispatch();\n\n  const playerName = useSelector(playerNameSelector);\n  const isAgreed = useSelector(agreedSelector);\n\n  const startTimer = useCallback(() => {\n    dispatch(timeStart());\n  }, [dispatch]);\n\n  return {\n    playerName,\n    isAgreed,\n\n    startTimer,\n  };\n};\n\nexport default useAppBootstrap;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  compMan: 'Computer man',\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport Helmet from 'react-helmet';\n\nimport AgreeScreen from './AgreeScreen';\nimport IntroduceScreen from './IntroduceScreen';\n\nimport useAppBootstrap from './useAppBootstrap';\n\nimport messages from './messages';\n\nconst AppBootstrap = (props) => {\n  const intl = useIntl();\n  const { children } = props;\n  const { playerName, isAgreed, startTimer } = useAppBootstrap();\n\n  if (!playerName && !isAgreed) {\n    return <IntroduceScreen />;\n  }\n\n  if (playerName && !isAgreed) {\n    return <AgreeScreen />;\n  }\n\n  startTimer();\n\n  return (\n    <>\n      <Helmet title={`${intl.formatMessage(messages.compMan)} ${playerName}`} />\n      {children}\n    </>\n  );\n};\n\nAppBootstrap.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default AppBootstrap;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const compSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const computerSelector = createSelector(\n  compSelector,\n  (comp) => comp.computer,\n);\n\nexport const memorySelector = createSelector(\n  compSelector,\n  (comp) => comp.memory,\n);\n\nexport const hddSelector = createSelector(compSelector, (comp) => comp.hdd);\n\nexport const modemSelector = createSelector(compSelector, (comp) => comp.modem);\n\nexport const cdSelector = createSelector(compSelector, (comp) => comp.cd);\n\nexport const soundSelector = createSelector(compSelector, (comp) => comp.sound);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Your computer',\n  computer: 'Computer',\n  memory: 'RAM',\n  hdd: 'HDD',\n  modem: 'Modem',\n  cd: 'CD-ROM',\n  sound: 'Sound Blaster',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst ComputerPanel = () => {\n  const intl = useIntl();\n\n  const computer = useSelector(selectors.computerSelector);\n  const memory = useSelector(selectors.memorySelector);\n  const hdd = useSelector(selectors.hddSelector);\n  const modem = useSelector(selectors.modemSelector);\n  const cd = useSelector(selectors.cdSelector);\n  const sound = useSelector(selectors.soundSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      {\n        name: intl.formatMessage(messages.computer),\n        value: <Dictionary name=\"computer\" value={computer} />,\n      },\n      {\n        name: intl.formatMessage(messages.memory),\n        value: <Dictionary name=\"memory\" value={memory} />,\n      },\n      {\n        name: intl.formatMessage(messages.hdd),\n        value: <Dictionary name=\"hdd\" value={hdd} />,\n      },\n      {\n        name: intl.formatMessage(messages.modem),\n        value: <Dictionary name=\"modem\" value={modem} />,\n      },\n      {\n        name: intl.formatMessage(messages.cd),\n        value: <Dictionary name=\"cd\" value={cd} />,\n      },\n      {\n        name: intl.formatMessage(messages.sound),\n        value: <Dictionary name=\"sound\" value={sound} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default ComputerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allDateSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const dateFullSelector = createSelector(\n  allDateSelector,\n  (date) => date.date,\n);\n\nexport const dateSelector = createSelector(dateFullSelector, (date) => {\n  const d = new Date(date);\n\n  return `${d.getDate()}.${d.getMonth() + 1}.${d.getFullYear()}`;\n});\n\nexport const timeSelector = createSelector(dateFullSelector, (date) => {\n  const d = new Date(date);\n\n  return d.getHours();\n});\n\nexport const isCountingSelector = createSelector(\n  allDateSelector,\n  (date) => date.counting,\n);\n","const HOUR_DURATION = 1000; // In milliseconds\n\nconst counter = (currentDate, isCounting) => {\n  return new Promise((resolve) => {\n    const date = new Date(currentDate);\n\n    setTimeout(() => {\n      if (isCounting) {\n        date.setTime(date.getTime() + 60 * 60 * 1000);\n      }\n\n      resolve({\n        date: date.toString(),\n      });\n    }, HOUR_DURATION);\n  });\n};\n\nexport default counter;\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  dateFullSelector,\n  dateSelector,\n  isCountingSelector,\n  timeSelector,\n} from './selectors';\n\nimport { updateDate } from '../AppBootstrap/actions';\n\nimport counter from '~/utils/Timer/timerCounter';\n\nconst useDatePanel = () => {\n  const dispatch = useDispatch();\n\n  const isCounting = useSelector(isCountingSelector);\n  const dateFull = useSelector(dateFullSelector);\n  const date = useSelector(dateSelector);\n  const time = useSelector(timeSelector);\n\n  const updateTime = useCallback(async () => {\n    const currentDate = await counter(dateFull, isCounting);\n\n    dispatch(updateDate(currentDate));\n  }, [dateFull, dispatch, isCounting]);\n\n  return {\n    date,\n    time,\n\n    updateTime,\n  };\n};\n\nexport default useDatePanel;\n","import React, { useEffect } from 'react';\n\nimport useDatePanel from '~/containers/DatePanel/useDatePanel';\n\nimport { DatePanel as DatePanelComponent } from '~/components';\n\nconst DatePanel = () => {\n  const { date, time, updateTime } = useDatePanel();\n\n  useEffect(() => {\n    updateTime();\n  }, [date, time, updateTime]);\n\n  return <DatePanelComponent date={date} time={time} />;\n};\n\nexport default DatePanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  money: 'Money',\n  points: 'Points',\n  status: 'Your status',\n  mood: 'Mood',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst PlayerPanel = () => {\n  const intl = useIntl();\n\n  const money = useSelector(selectors.moneySelector);\n  const points = useSelector(selectors.pointsSelector);\n  const status = useSelector(selectors.statusSelector);\n  const mood = useSelector(selectors.moodSelector);\n\n  const panelProps = {\n    header: false,\n    fields: [\n      { name: intl.formatMessage(messages.money), value: `${money}$` },\n      { name: intl.formatMessage(messages.points), value: points },\n      {\n        name: intl.formatMessage(messages.status),\n        value: <Dictionary name=\"status\" value={status} />,\n      },\n      {\n        name: intl.formatMessage(messages.mood),\n        value: <Dictionary name=\"mood\" value={mood} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default PlayerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const softwareSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const osSelector = createSelector(softwareSelector, (soft) => soft.os);\n\nexport const antivirusSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.antivirus,\n);\n\nexport const programmingSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.programming,\n);\n\nexport const bbsSelector = createSelector(softwareSelector, (soft) => soft.bbs);\n\nexport const otherSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.other,\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Installed software',\n  os: 'OS',\n  antivirus: 'Antivirus',\n  programming: 'Programming',\n  bbs: 'BBS',\n  other: 'Other software',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst SoftPanel = () => {\n  const intl = useIntl();\n\n  const os = useSelector(selectors.osSelector);\n  const antivirus = useSelector(selectors.antivirusSelector);\n  const programming = useSelector(selectors.programmingSelector);\n  const bbs = useSelector(selectors.bbsSelector);\n  const other = useSelector(selectors.otherSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      {\n        name: intl.formatMessage(messages.os),\n        value: <Dictionary name=\"os\" value={os} />,\n      },\n      {\n        name: intl.formatMessage(messages.antivirus),\n        value: antivirus || <Dictionary name=\"antivirus\" value={antivirus} />,\n      },\n      {\n        name: intl.formatMessage(messages.programming),\n        value: <Dictionary name=\"programming\" value={programming} />,\n      },\n      {\n        name: intl.formatMessage(messages.bbs),\n        value: <Dictionary name=\"antivirus\" value={bbs} />,\n      },\n      {\n        name: intl.formatMessage(messages.other),\n        value: <Dictionary name=\"antivirus\" value={other} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default SoftPanel;\n","import reducer from './uiRootReducer';\nimport { STORE_SLICE_NAME as UI_ROOT_STORE_SLICE_NAME } from './constants';\n\nimport AppBootstrap from './AppBootstrap/AppBootstrap';\nimport ComputerPanel from './ComputerPanel/ComputerPanel';\nimport DatePanel from './DatePanel/DatePanel';\nimport Modal from './Modal/Modal';\nimport PlayerPanel from './PlayerPanel/PlayerPanel';\nimport SoftPanel from './SoftPanel/SoftPanel';\n\nexport {\n  reducer,\n  UI_ROOT_STORE_SLICE_NAME,\n  AppBootstrap,\n  ComputerPanel,\n  DatePanel,\n  Modal,\n  PlayerPanel,\n  SoftPanel,\n};\n","export const STORE_SLICE_NAME = 'game';\n"],"sourceRoot":""}