{"version":3,"sources":["containers/AppBootstrap/reducer.js","components/ActionsPanel/ActionsPanel.jsx","components/AgreeScreen/messages.js","components/AgreeScreen/AgreeScreen.jsx","components/AppLayout/AppLayout.jsx","components/DatePanel/DatePanel.jsx","components/Dictionary/messages.js","components/Dictionary/Dictionary.jsx","components/IntroduceScreen/messages.js","components/IntroduceScreen/IntroduceScreen.jsx","components/Modal/Modal.jsx","components/Panel/Panel.jsx","components/WorkPanel/messages.js","components/WorkPanel/WorkPanel.jsx","components/index.js","store/configureStore.env.js","polyfills/polyfills.env.js","polyfills/polyfills.prod.js","containers/AppBootstrap/types.js","serviceWorker.js","store/index.js","store/initialState.js","i18n/index.js","i18n/I18nProvider.jsx","App.jsx","index.jsx","store/rootReducer.js","store/configureStore.prod.js","containers/uiRootReducer.js","containers/AppBootstrap/constants.js","containers/ActionsPanel/useActionsPanel.js","containers/ActionsPanel/messages.js","containers/ActionsPanel/ActionsPanel.jsx","containers/AppBootstrap/AgreeScreen.jsx","containers/AppBootstrap/actions.js","containers/AppBootstrap/IntroduceScreen.jsx","containers/uiRootSelector.js","containers/AppBootstrap/selectors.js","containers/PlayerPanel/selectors.js","containers/AppBootstrap/useAppBootstrap.js","containers/AppBootstrap/messages.js","containers/AppBootstrap/AppBootstrap.jsx","containers/ComputerPanel/selectors.js","containers/ComputerPanel/messages.js","containers/ComputerPanel/ComputerPanel.jsx","containers/DatePanel/selectors.js","utils/Timer/timerCounter.js","containers/DatePanel/useDatePanel.js","containers/DatePanel/DatePanel.jsx","containers/PlayerPanel/messages.js","containers/PlayerPanel/PlayerPanel.jsx","containers/SoftPanel/selectors.js","containers/SoftPanel/messages.js","containers/SoftPanel/SoftPanel.jsx","containers/WorkPanel/selectors.js","containers/WorkPanel/WorkPanel.jsx","containers/index.js","containers/constants.js"],"names":["initialState","agreed","player","name","money","points","status","mood","computer","memory","hdd","modem","cd","sound","software","os","antivirus","programming","bbs","other","date","counting","work","position","salary","state","action","produce","draft","type","payload","types","ActionsPanel","props","items","ListGroup","className","map","item","Item","key","onClick","handleClick","defineMessages","heading","mainText","submit","AgreeScreen","intl","useIntl","onSubmitAgree","headingText","useMemo","formatMessage","messages","submitText","Container","fluid","Row","Col","Button","AppLayout","actionsPanel","computerPanel","datePanel","playerPanel","softPanel","workPanel","style","padding","DatePanel","time","no","bad","normal","good","excellent","newbie","programmer","hacker","unemployed","locksmith","Dictionary","value","propTypes","PropTypes","string","isRequired","number","typeYourName","IntroduceScreen","onPlayerNameChange","useState","playerName","changeName","Form","Control","placeholder","required","onChange","e","target","Modal","isOpened","trigger","header","isHeaderCloseButton","children","handleClose","handleOpen","renderTriggerComponent","text","show","onHide","Header","closeButton","Body","defaultProps","Panel","fields","field","perDay","WorkPanel","module","exports","require","Intl","PluralRules","RelativeTimeFormat","CHANGE_PLAYER_NAME","CHANGE_AGREED","TIME_STOP","TIME_START","UPDATE_DATE","Boolean","window","location","hostname","match","store","configureStore","I18nProvider","memo","activeLocale","getUserLocale","ruMessages","locale","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","combineReducers","UI_ROOT_STORE_SLICE_NAME","reducer","additionalMiddlewares","composeEnhancers","compose","middlewares","enhancers","applyMiddleware","createStore","rootReducer","useActionsPanel","handleComputerClick","useCallback","alert","handleSoftwareClick","handleHackingClick","handleBbsClick","handleJobClick","handleEntertainmentClick","hacking","job","entertainment","dispatch","useDispatch","handleAgreeChange","handlePlayerNameChange","changePlayerName","uiRootSelector","gameSelector","createSelector","uiRoot","agreedSelector","game","playerSelector","playerNameSelector","moneySelector","pointsSelector","statusSelector","moodSelector","useAppBootstrap","useSelector","isAgreed","startTimer","compMan","AppBootstrap","title","compSelector","computerSelector","comp","memorySelector","hddSelector","modemSelector","cdSelector","soundSelector","ComputerPanel","selectors","panelProps","allDateSelector","dateFullSelector","dateSelector","d","Date","getDate","getMonth","getFullYear","timeSelector","getHours","isCountingSelector","counter","currentDate","isCounting","Promise","resolve","setTimeout","setTime","getTime","toString","useDatePanel","dateFull","updateTime","a","useEffect","PlayerPanel","softwareSelector","osSelector","soft","antivirusSelector","programmingSelector","bbsSelector","otherSelector","SoftPanel","allWorkSelector","positionSelector","salarySelector"],"mappings":"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","file":"static/js/main.8fed1924.chunk.js","sourcesContent":["import produce from 'immer';\n\nimport * as types from './types';\n\nexport const initialState = {\n  agreed: false,\n  player: {\n    name: null,\n    money: 60,\n    points: 0,\n    status: 0,\n    mood: 1,\n  },\n  computer: {\n    computer: 0,\n    memory: 0,\n    hdd: 0,\n    modem: 0,\n    cd: 0,\n    sound: 0,\n  },\n  software: {\n    os: 0,\n    antivirus: 0,\n    programming: 0,\n    bbs: 0,\n    other: 0,\n  },\n  date: {\n    date: 'Thu Jan 01 1998 09:00:00 GMT+0100 (Central European Standard Time)',\n    counting: false,\n  },\n  work: {\n    position: 0,\n    salary: 0,\n  },\n};\n\nexport default (state = initialState, action) =>\n  /* eslint-disable-next-line */\n  produce(state, (draft) => {\n    const { type, payload } = action;\n\n    switch (type) {\n      case types.CHANGE_PLAYER_NAME: {\n        draft.player = { ...draft.player, name: payload };\n\n        break;\n      }\n\n      case types.CHANGE_AGREED: {\n        draft.agreed = true;\n\n        break;\n      }\n\n      case types.TIME_START: {\n        draft.date.counting = true;\n\n        break;\n      }\n\n      case types.TIME_STOP: {\n        draft.date.counting = false;\n\n        break;\n      }\n\n      case types.UPDATE_DATE: {\n        const { date } = payload;\n\n        draft.date = {\n          ...draft.date,\n          date,\n        };\n\n        break;\n      }\n\n      default: {\n        return initialState;\n      }\n    }\n  });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListGroup } from 'react-bootstrap';\n\nimport './ActionsPanel.css';\n\nconst ActionsPanel = (props) => {\n  const { items } = props;\n\n  return (\n    <ListGroup className=\"ActionsPanel\">\n      {items.map((item) => (\n        <ListGroup.Item key={item.name} onClick={item.handleClick}>\n          {item.name}\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n};\n\nActionsPanel.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      handleClick: PropTypes.func.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ActionsPanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  heading: 'Play and enjoy',\n  mainText: 'When you complete this game, blah blah blah',\n  submit: 'OK',\n});\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './AgreeScreen.css';\n\nconst AgreeScreen = (props) => {\n  const intl = useIntl();\n  const { onSubmitAgree } = props;\n\n  const headingText = useMemo(() => intl.formatMessage(messages.heading), [\n    intl,\n  ]);\n  const mainText = useMemo(() => intl.formatMessage(messages.mainText), [intl]);\n  const submitText = useMemo(() => intl.formatMessage(messages.submit), [intl]);\n\n  return (\n    <Container className=\"AgreeScreen\" fluid>\n      <Row>\n        <Col>\n          <h1>{headingText}</h1>\n        </Col>\n      </Row>\n      <Row>\n        <p>{mainText}</p>\n      </Row>\n      <Row>\n        <Button onClick={() => onSubmitAgree()}>{submitText}</Button>\n      </Row>\n    </Container>\n  );\n};\n\nAgreeScreen.propTypes = {\n  onSubmitAgree: PropTypes.func.isRequired,\n};\n\nexport default AgreeScreen;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport './AppLayout.css';\n\nconst AppLayout = (props) => {\n  const {\n    actionsPanel,\n    computerPanel,\n    datePanel,\n    playerPanel,\n    softPanel,\n    workPanel,\n  } = props;\n\n  return (\n    <Container className=\"Game\" fluid>\n      <Row>\n        <Col style={{ padding: '5px' }}>\n          {playerPanel}\n          {computerPanel}\n          {softPanel}\n        </Col>\n        <Col style={{ padding: '5px' }}>\n          {datePanel}\n          {workPanel}\n          {actionsPanel}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nAppLayout.propTypes = {\n  playerPanel: PropTypes.node.isRequired,\n  computerPanel: PropTypes.node.isRequired,\n  softPanel: PropTypes.node.isRequired,\n  datePanel: PropTypes.node.isRequired,\n  workPanel: PropTypes.node.isRequired,\n  actionsPanel: PropTypes.node.isRequired,\n};\n\nexport default AppLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './DatePanel.css';\n\nconst DatePanel = (props) => {\n  const { date, time } = props;\n\n  return (\n    <div className=\"DatePanel\">\n      <div className=\"DatePanel__field Date\">{date}</div>\n      <div className=\"DatePanel__field Time\">{`${time}:00`}</div>\n    </div>\n  );\n};\n\nDatePanel.propTypes = {\n  date: PropTypes.string.isRequired,\n  time: PropTypes.number.isRequired,\n};\n\nexport default DatePanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  no: 'No',\n  bad: 'Bad',\n  normal: 'Normal',\n  good: 'Good',\n  excellent: 'Excellent',\n  newbie: 'Newbie',\n  programmer: 'Programmer',\n  hacker: 'Hacker',\n  unemployed: 'Unemployed',\n  locksmith: 'Locksmith',\n});\n","import PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nconst Dictionary = (props) => {\n  const intl = useIntl();\n  const { name, value } = props;\n\n  const values = {\n    status: [\n      intl.formatMessage(messages.newbie),\n      intl.formatMessage(messages.programmer),\n      intl.formatMessage(messages.hacker),\n    ],\n    mood: [\n      intl.formatMessage(messages.bad),\n      intl.formatMessage(messages.normal),\n      intl.formatMessage(messages.good),\n      intl.formatMessage(messages.excellent),\n    ],\n    computer: [intl.formatMessage(messages.no), '386DX-40', '486DX-66'],\n    memory: [intl.formatMessage(messages.no), 4, 16, 32],\n    hdd: [intl.formatMessage(messages.no), 210],\n    modem: [intl.formatMessage(messages.no), 2400],\n    cd: [intl.formatMessage(messages.no), 4],\n    sound: [intl.formatMessage(messages.no), 'Sound Blaster'],\n    os: [\n      intl.formatMessage(messages.no),\n      'Windows 3.11',\n      'Windows 95',\n      'Windows NT 4.0',\n      'OS/2 5.0 Warp',\n    ],\n    antivirus: [intl.formatMessage(messages.no)],\n    programming: [\n      intl.formatMessage(messages.no),\n      'Pascal',\n      'Assembler',\n      'Visual Basic',\n      'Delphi 3.0',\n    ],\n    bbs: [intl.formatMessage(messages.no)],\n    other: [intl.formatMessage(messages.no)],\n    position: [\n      intl.formatMessage(messages.unemployed),\n      intl.formatMessage(messages.locksmith),\n    ],\n  };\n\n  return values[name][value];\n};\n\nDictionary.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Dictionary;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  typeYourName: 'Type your name here',\n  submit: 'Submit',\n});\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './IntroduceScreen.css';\n\nconst IntroduceScreen = (props) => {\n  const intl = useIntl();\n  const { onPlayerNameChange } = props;\n\n  const [playerName, changeName] = useState(null);\n\n  const submitText = useMemo(() => intl.formatMessage(messages.submit), [intl]);\n\n  return (\n    <Form className=\"IntroduceScreen\">\n      <Row>\n        <Col>\n          <Form.Control\n            type=\"text\"\n            name=\"name\"\n            placeholder={intl.formatMessage(messages.typeYourName)}\n            required\n            onChange={(e) => changeName(e.target.value)}\n          />\n        </Col>\n        <Col>\n          <Button onClick={() => onPlayerNameChange(playerName)}>\n            {submitText}\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nIntroduceScreen.propTypes = {\n  onPlayerNameChange: PropTypes.func.isRequired,\n};\n\nexport default IntroduceScreen;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal as RBModal } from 'react-bootstrap';\n\nimport './Modal.css';\n\nconst Modal = (props) => {\n  const {\n    isOpened,\n    trigger,\n    header,\n    isHeaderCloseButton,\n    children,\n    handleClose,\n    handleOpen,\n  } = props;\n\n  const renderTriggerComponent = useMemo(\n    () => (\n      <Button className={trigger.className} onClick={handleOpen}>\n        {trigger.text}\n      </Button>\n    ),\n    [trigger.text, trigger.className, handleOpen],\n  );\n\n  return (\n    <>\n      {renderTriggerComponent}\n      <RBModal show={isOpened} onHide={handleClose}>\n        {header && (\n          <RBModal.Header closeButton={isHeaderCloseButton}>\n            {header}\n          </RBModal.Header>\n        )}\n        <RBModal.Body>{children}</RBModal.Body>\n      </RBModal>\n    </>\n  );\n};\n\nModal.propTypes = {\n  isOpened: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  handleOpen: PropTypes.func.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  trigger: PropTypes.shape({\n    icon: PropTypes.string,\n    text: PropTypes.string,\n    className: PropTypes.string,\n  }).isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  isHeaderCloseButton: PropTypes.bool,\n};\n\nModal.defaultProps = {\n  header: false,\n  isHeaderCloseButton: true,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Panel.css';\n\nconst Panel = (props) => {\n  const { header, fields } = props;\n\n  return (\n    <div className=\"Panel\">\n      {header && <div className=\"Panel__header\">{header}</div>}\n      {fields.map((field) => (\n        <p key={field.name} className=\"Panel__field\">\n          {`${field.name} -`}\n          <span>{field.value}</span>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nPanel.propTypes = {\n  fields: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.node,\n      ]),\n    }),\n  ).isRequired,\n  header: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n};\n\nPanel.defaultProps = {\n  header: false,\n};\n\nexport default Panel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Your job',\n  perDay: 'per day',\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport messages from './messages';\n\nimport './WorkPanel.css';\n\nconst WorkPanel = (props) => {\n  const intl = useIntl();\n  const { position, salary } = props;\n\n  return (\n    <div className=\"WorkPanel\">\n      <div className=\"Panel__header\">{intl.formatMessage(messages.header)}</div>\n      <div className=\"WorkPanel__field\">\n        {position} /{salary}$\n        <span className=\"WorkPanel__description\">\n          {intl.formatMessage(messages.perDay)}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nWorkPanel.propTypes = {\n  position: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  salary: PropTypes.number.isRequired,\n};\n\nexport default WorkPanel;\n","import ActionsPanel from './ActionsPanel/ActionsPanel';\nimport AgreeScreen from './AgreeScreen/AgreeScreen';\nimport AppLayout from './AppLayout/AppLayout';\nimport DatePanel from './DatePanel/DatePanel';\nimport Dictionary from './Dictionary/Dictionary';\nimport IntroduceScreen from './IntroduceScreen/IntroduceScreen';\nimport Modal from './Modal/Modal';\nimport Panel from './Panel/Panel';\nimport WorkPanel from './WorkPanel/WorkPanel';\n\nexport {\n  ActionsPanel,\n  AgreeScreen,\n  AppLayout,\n  DatePanel,\n  Dictionary,\n  IntroduceScreen,\n  Modal,\n  Panel,\n  WorkPanel,\n};\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod');\n} else {\n  module.exports = require('./configureStore.dev');\n}\n","if (process.env.NODE_ENV === 'production') {\n  require('./polyfills.prod');\n} else {\n  require('./polyfills.dev');\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\n\nif (!Intl.PluralRules) {\n  require('@formatjs/intl-pluralrules/polyfill');\n  require('@formatjs/intl-pluralrules/dist/locale-data/en');\n  require('@formatjs/intl-pluralrules/dist/locale-data/ru');\n}\n\nif (!Intl.RelativeTimeFormat) {\n  require('@formatjs/intl-relativetimeformat/polyfill');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/en');\n  require('@formatjs/intl-relativetimeformat/dist/locale-data/ru');\n}\n","export const CHANGE_PLAYER_NAME = 'CHANGE_PLAYER_NAME';\nexport const CHANGE_AGREED = 'CHANGE_AGREED';\nexport const TIME_STOP = 'TIME_STOP';\nexport const TIME_START = 'TIME_START';\nexport const UPDATE_DATE = 'UPDATE_DATE';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import configureStore from './configureStore.env';\nimport initialState from './initialState';\n\n/** @type {import('redux').Store} */\nconst store = configureStore(initialState);\n\nexport default store;\n","export default {};\n","import I18nProvider from './I18nProvider';\n\nexport default I18nProvider;\n","import React, { memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\n\nimport getUserLocale from 'get-user-locale';\n\nimport ruMessages from './translations/ru.json';\n\nconst I18nProvider = ({ children }) => {\n  const activeLocale = getUserLocale();\n\n  const messages = useMemo(\n    // TODO: return user locale using\n    // () => (activeLocale.includes('ru') ? ruMessages : enMessages),\n    () => ruMessages,\n    [],\n  );\n\n  return (\n    <IntlProvider locale={activeLocale} messages={messages}>\n      {children}\n    </IntlProvider>\n  );\n};\n\nI18nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default memo(I18nProvider);\n","import React from 'react';\n\nimport {\n  ActionsPanel,\n  AppBootstrap,\n  ComputerPanel,\n  DatePanel,\n  PlayerPanel,\n  SoftPanel,\n  WorkPanel,\n} from '~/containers';\nimport { AppLayout } from '~/components';\n\nimport './App.css';\n\nconst App = () => {\n  const playerPanel = <PlayerPanel />;\n  const computerPanel = <ComputerPanel />;\n  const softPanel = <SoftPanel />;\n  const datePanel = <DatePanel />;\n  const workPanel = <WorkPanel />;\n  const actionsPanel = <ActionsPanel />;\n\n  return (\n    <div className=\"App\">\n      <AppBootstrap>\n        <AppLayout\n          actionsPanel={actionsPanel}\n          datePanel={datePanel}\n          playerPanel={playerPanel}\n          computerPanel={computerPanel}\n          softPanel={softPanel}\n          workPanel={workPanel}\n        />\n      </AppBootstrap>\n    </div>\n  );\n};\n\nexport default App;\n","import './polyfills';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport store from '~/store';\nimport I18nProvider from '~/i18n';\nimport App from '~/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <I18nProvider>\n      <App />\n    </I18nProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux';\n\nimport { UI_ROOT_STORE_SLICE_NAME } from '~/containers';\nimport reducer from '~/containers/AppBootstrap/reducer';\n\nexport default combineReducers({\n  [UI_ROOT_STORE_SLICE_NAME]: reducer,\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\n\nimport rootReducer from './rootReducer';\n\nconst configureStore = (\n  initialState,\n  additionalMiddlewares = [],\n  composeEnhancers = compose,\n) => {\n  const middlewares = [...additionalMiddlewares];\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","import { combineReducers } from 'redux';\n\nimport reducer from './AppBootstrap/reducer';\nimport { STORE_SLICE_NAME as APP_STORE_SLICE_NAME } from './AppBootstrap/constants';\n\nconst uiRootReducer = combineReducers({\n  [APP_STORE_SLICE_NAME]: reducer,\n});\n\nexport default uiRootReducer;\n","export const STORE_SLICE_NAME = 'app';\n","import { useCallback } from 'react';\n\nconst useActionsPanel = () => {\n  const handleComputerClick = useCallback(() => {\n    alert('Computer clicked!');\n  }, []);\n\n  const handleSoftwareClick = useCallback(() => {\n    alert('Software clicked!');\n  }, []);\n\n  const handleHackingClick = useCallback(() => {\n    alert('Hacking clicked!');\n  }, []);\n\n  const handleBbsClick = useCallback(() => {\n    alert('BBS clicked!');\n  }, []);\n\n  const handleJobClick = useCallback(() => {\n    alert('Job clicked!');\n  }, []);\n\n  const handleEntertainmentClick = useCallback(() => {\n    alert('Entertainment clicked!');\n  }, []);\n\n  return {\n    handleComputerClick,\n    handleSoftwareClick,\n    handleHackingClick,\n    handleBbsClick,\n    handleJobClick,\n    handleEntertainmentClick,\n  };\n};\n\nexport default useActionsPanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  computer: 'Computer',\n  software: 'Software',\n  hacking: 'Hacking',\n  bbs: 'BBS`s',\n  job: 'Find job',\n  entertainment: 'Entertainment',\n});\n","import React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport useActionsPanel from './useActionsPanel';\n\nimport messages from './messages';\n\nimport { ActionsPanel as ActionsPanelComponent } from '~/components';\n\nconst ActionsPanel = () => {\n  const intl = useIntl();\n  const {\n    handleComputerClick,\n    handleSoftwareClick,\n    handleHackingClick,\n    handleBbsClick,\n    handleJobClick,\n    handleEntertainmentClick,\n  } = useActionsPanel();\n\n  const items = [\n    {\n      name: intl.formatMessage(messages.computer),\n      handleClick: handleComputerClick,\n    },\n    {\n      name: intl.formatMessage(messages.software),\n      handleClick: handleSoftwareClick,\n    },\n    {\n      name: intl.formatMessage(messages.hacking),\n      handleClick: handleHackingClick,\n    },\n    {\n      name: intl.formatMessage(messages.bbs),\n      handleClick: handleBbsClick,\n    },\n    {\n      name: intl.formatMessage(messages.job),\n      handleClick: handleJobClick,\n    },\n    {\n      name: intl.formatMessage(messages.entertainment),\n      handleClick: handleEntertainmentClick,\n    },\n  ];\n\n  return <ActionsPanelComponent items={items} />;\n};\n\nexport default ActionsPanel;\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { agree } from './actions';\n\nimport { AgreeScreen as AgreeScreenComponent } from '~/components';\n\nconst AgreeScreen = () => {\n  const dispatch = useDispatch();\n\n  const handleAgreeChange = useCallback(() => {\n    dispatch(agree());\n  }, [dispatch]);\n\n  return <AgreeScreenComponent onSubmitAgree={handleAgreeChange} />;\n};\n\nexport default AgreeScreen;\n","import * as types from './types';\n\nexport const changePlayerName = (payload) => ({\n  type: types.CHANGE_PLAYER_NAME,\n  payload,\n});\n\nexport const agree = () => ({\n  type: types.CHANGE_AGREED,\n});\n\nexport const timeStop = () => ({\n  type: types.TIME_STOP,\n});\n\nexport const timeStart = () => ({\n  type: types.TIME_START,\n});\n\nexport const updateDate = (payload) => ({\n  type: types.UPDATE_DATE,\n  payload,\n});\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { changePlayerName } from './actions';\n\nimport { IntroduceScreen as IntroduceScreenComponent } from '~/components';\n\nconst IntroduceScreen = () => {\n  const dispatch = useDispatch();\n\n  const handlePlayerNameChange = useCallback(\n    (payload) => {\n      dispatch(changePlayerName(payload));\n    },\n    [dispatch],\n  );\n\n  return (\n    <IntroduceScreenComponent onPlayerNameChange={handlePlayerNameChange} />\n  );\n};\n\nexport default IntroduceScreen;\n","import { STORE_SLICE_NAME } from './constants';\n\nconst uiRootSelector = (state) => state[STORE_SLICE_NAME];\n\nexport default uiRootSelector;\n","import { createSelector } from 'reselect';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const gameSelector = createSelector(uiRootSelector, (uiRoot) => uiRoot);\n\nexport const agreedSelector = createSelector(\n  gameSelector,\n  (game) => game.agreed,\n);\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const playerSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const playerNameSelector = createSelector(\n  playerSelector,\n  (player) => player.name,\n);\n\nexport const moneySelector = createSelector(\n  playerSelector,\n  (player) => player.money,\n);\n\nexport const pointsSelector = createSelector(\n  playerSelector,\n  (player) => player.points,\n);\n\nexport const statusSelector = createSelector(\n  playerSelector,\n  (player) => player.status,\n);\n\nexport const moodSelector = createSelector(\n  playerSelector,\n  (player) => player.mood,\n);\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { timeStart } from './actions';\nimport { agreedSelector } from './selectors';\n\nimport { playerNameSelector } from '../PlayerPanel/selectors';\n\nconst useAppBootstrap = () => {\n  const dispatch = useDispatch();\n\n  const playerName = useSelector(playerNameSelector);\n  const isAgreed = useSelector(agreedSelector);\n\n  const startTimer = useCallback(() => {\n    dispatch(timeStart());\n  }, [dispatch]);\n\n  return {\n    playerName,\n    isAgreed,\n\n    startTimer,\n  };\n};\n\nexport default useAppBootstrap;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  compMan: 'Computer man',\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport Helmet from 'react-helmet';\n\nimport AgreeScreen from './AgreeScreen';\nimport IntroduceScreen from './IntroduceScreen';\n\nimport useAppBootstrap from './useAppBootstrap';\n\nimport messages from './messages';\n\nconst AppBootstrap = (props) => {\n  const intl = useIntl();\n  const { children } = props;\n  const { playerName, isAgreed, startTimer } = useAppBootstrap();\n\n  if (!playerName && !isAgreed) {\n    return <IntroduceScreen />;\n  }\n\n  if (playerName && !isAgreed) {\n    return <AgreeScreen />;\n  }\n\n  startTimer();\n\n  return (\n    <>\n      <Helmet title={`${intl.formatMessage(messages.compMan)} ${playerName}`} />\n      {children}\n    </>\n  );\n};\n\nAppBootstrap.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default AppBootstrap;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const compSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const computerSelector = createSelector(\n  compSelector,\n  (comp) => comp.computer,\n);\n\nexport const memorySelector = createSelector(\n  compSelector,\n  (comp) => comp.memory,\n);\n\nexport const hddSelector = createSelector(compSelector, (comp) => comp.hdd);\n\nexport const modemSelector = createSelector(compSelector, (comp) => comp.modem);\n\nexport const cdSelector = createSelector(compSelector, (comp) => comp.cd);\n\nexport const soundSelector = createSelector(compSelector, (comp) => comp.sound);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Your computer',\n  computer: 'Computer',\n  memory: 'RAM',\n  hdd: 'HDD',\n  modem: 'Modem',\n  cd: 'CD-ROM',\n  sound: 'Sound Blaster',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst ComputerPanel = () => {\n  const intl = useIntl();\n\n  const computer = useSelector(selectors.computerSelector);\n  const memory = useSelector(selectors.memorySelector);\n  const hdd = useSelector(selectors.hddSelector);\n  const modem = useSelector(selectors.modemSelector);\n  const cd = useSelector(selectors.cdSelector);\n  const sound = useSelector(selectors.soundSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      {\n        name: intl.formatMessage(messages.computer),\n        value: <Dictionary name=\"computer\" value={computer} />,\n      },\n      {\n        name: intl.formatMessage(messages.memory),\n        value: <Dictionary name=\"memory\" value={memory} />,\n      },\n      {\n        name: intl.formatMessage(messages.hdd),\n        value: <Dictionary name=\"hdd\" value={hdd} />,\n      },\n      {\n        name: intl.formatMessage(messages.modem),\n        value: <Dictionary name=\"modem\" value={modem} />,\n      },\n      {\n        name: intl.formatMessage(messages.cd),\n        value: <Dictionary name=\"cd\" value={cd} />,\n      },\n      {\n        name: intl.formatMessage(messages.sound),\n        value: <Dictionary name=\"sound\" value={sound} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default ComputerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allDateSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const dateFullSelector = createSelector(\n  allDateSelector,\n  (date) => date.date,\n);\n\nexport const dateSelector = createSelector(dateFullSelector, (date) => {\n  const d = new Date(date);\n\n  return `${d.getDate()}.${d.getMonth() + 1}.${d.getFullYear()}`;\n});\n\nexport const timeSelector = createSelector(dateFullSelector, (date) => {\n  const d = new Date(date);\n\n  return d.getHours();\n});\n\nexport const isCountingSelector = createSelector(\n  allDateSelector,\n  (date) => date.counting,\n);\n","const HOUR_DURATION = 1000; // In milliseconds\n\nconst counter = (currentDate, isCounting) => {\n  return new Promise((resolve) => {\n    const date = new Date(currentDate);\n\n    setTimeout(() => {\n      if (isCounting) {\n        date.setTime(date.getTime() + 60 * 60 * 1000);\n      }\n\n      resolve({\n        date: date.toString(),\n      });\n    }, HOUR_DURATION);\n  });\n};\n\nexport default counter;\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  dateFullSelector,\n  dateSelector,\n  isCountingSelector,\n  timeSelector,\n} from './selectors';\n\nimport { updateDate } from '../AppBootstrap/actions';\n\nimport counter from '~/utils/Timer/timerCounter';\n\nconst useDatePanel = () => {\n  const dispatch = useDispatch();\n\n  const isCounting = useSelector(isCountingSelector);\n  const dateFull = useSelector(dateFullSelector);\n  const date = useSelector(dateSelector);\n  const time = useSelector(timeSelector);\n\n  const updateTime = useCallback(async () => {\n    const currentDate = await counter(dateFull, isCounting);\n\n    dispatch(updateDate(currentDate));\n  }, [dateFull, dispatch, isCounting]);\n\n  return {\n    date,\n    time,\n\n    updateTime,\n  };\n};\n\nexport default useDatePanel;\n","import React, { useEffect } from 'react';\n\nimport useDatePanel from '~/containers/DatePanel/useDatePanel';\n\nimport { DatePanel as DatePanelComponent } from '~/components';\n\nconst DatePanel = () => {\n  const { date, time, updateTime } = useDatePanel();\n\n  useEffect(() => {\n    updateTime();\n  }, [date, time, updateTime]);\n\n  return <DatePanelComponent date={date} time={time} />;\n};\n\nexport default DatePanel;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  money: 'Money',\n  points: 'Points',\n  status: 'Your status',\n  mood: 'Mood',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst PlayerPanel = () => {\n  const intl = useIntl();\n\n  const money = useSelector(selectors.moneySelector);\n  const points = useSelector(selectors.pointsSelector);\n  const status = useSelector(selectors.statusSelector);\n  const mood = useSelector(selectors.moodSelector);\n\n  const panelProps = {\n    header: false,\n    fields: [\n      { name: intl.formatMessage(messages.money), value: `${money}$` },\n      { name: intl.formatMessage(messages.points), value: points },\n      {\n        name: intl.formatMessage(messages.status),\n        value: <Dictionary name=\"status\" value={status} />,\n      },\n      {\n        name: intl.formatMessage(messages.mood),\n        value: <Dictionary name=\"mood\" value={mood} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default PlayerPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const softwareSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const osSelector = createSelector(softwareSelector, (soft) => soft.os);\n\nexport const antivirusSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.antivirus,\n);\n\nexport const programmingSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.programming,\n);\n\nexport const bbsSelector = createSelector(softwareSelector, (soft) => soft.bbs);\n\nexport const otherSelector = createSelector(\n  softwareSelector,\n  (soft) => soft.other,\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  header: 'Installed software',\n  os: 'OS',\n  antivirus: 'Antivirus',\n  programming: 'Programming',\n  bbs: 'BBS',\n  other: 'Other software',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\n\nimport * as selectors from './selectors';\nimport messages from './messages';\n\nimport { Dictionary, Panel as PanelComponent } from '~/components';\n\nconst SoftPanel = () => {\n  const intl = useIntl();\n\n  const os = useSelector(selectors.osSelector);\n  const antivirus = useSelector(selectors.antivirusSelector);\n  const programming = useSelector(selectors.programmingSelector);\n  const bbs = useSelector(selectors.bbsSelector);\n  const other = useSelector(selectors.otherSelector);\n\n  const panelProps = {\n    header: intl.formatMessage(messages.header),\n    fields: [\n      {\n        name: intl.formatMessage(messages.os),\n        value: <Dictionary name=\"os\" value={os} />,\n      },\n      {\n        name: intl.formatMessage(messages.antivirus),\n        value: antivirus || <Dictionary name=\"antivirus\" value={antivirus} />,\n      },\n      {\n        name: intl.formatMessage(messages.programming),\n        value: <Dictionary name=\"programming\" value={programming} />,\n      },\n      {\n        name: intl.formatMessage(messages.bbs),\n        value: <Dictionary name=\"antivirus\" value={bbs} />,\n      },\n      {\n        name: intl.formatMessage(messages.other),\n        value: <Dictionary name=\"antivirus\" value={other} />,\n      },\n    ],\n  };\n\n  /* eslint-disable-next-line */\n  return <PanelComponent {...panelProps} />;\n};\n\nexport default SoftPanel;\n","import { createSelector } from 'reselect';\n\nimport { STORE_SLICE_NAME } from './constants';\n\nimport uiRootSelector from '../uiRootSelector';\n\nexport const allWorkSelector = createSelector(\n  uiRootSelector,\n  (uiRoot) => uiRoot[STORE_SLICE_NAME],\n);\n\nexport const positionSelector = createSelector(\n  allWorkSelector,\n  (work) => work.position,\n);\n\nexport const salarySelector = createSelector(\n  allWorkSelector,\n  (work) => work.salary,\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { positionSelector, salarySelector } from './selectors';\n\nimport { Dictionary, WorkPanel as WorkPanelComponent } from '~/components';\n\nconst WorkPanel = () => {\n  const position = useSelector(positionSelector);\n  const salary = useSelector(salarySelector);\n\n  return (\n    <WorkPanelComponent\n      position={<Dictionary name=\"position\" value={position} />}\n      salary={salary}\n    />\n  );\n};\n\nexport default WorkPanel;\n","import reducer from './uiRootReducer';\nimport { STORE_SLICE_NAME as UI_ROOT_STORE_SLICE_NAME } from './constants';\n\nimport ActionsPanel from './ActionsPanel/ActionsPanel';\nimport AppBootstrap from './AppBootstrap/AppBootstrap';\nimport ComputerPanel from './ComputerPanel/ComputerPanel';\nimport DatePanel from './DatePanel/DatePanel';\nimport Modal from './Modal/Modal';\nimport PlayerPanel from './PlayerPanel/PlayerPanel';\nimport SoftPanel from './SoftPanel/SoftPanel';\nimport WorkPanel from './WorkPanel/WorkPanel';\n\nexport {\n  reducer,\n  UI_ROOT_STORE_SLICE_NAME,\n  ActionsPanel,\n  AppBootstrap,\n  ComputerPanel,\n  DatePanel,\n  Modal,\n  PlayerPanel,\n  SoftPanel,\n  WorkPanel,\n};\n","export const STORE_SLICE_NAME = 'game';\n"],"sourceRoot":""}